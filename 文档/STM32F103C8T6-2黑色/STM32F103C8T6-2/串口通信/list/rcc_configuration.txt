; generated by ARM C/C++ Compiler, 4.1 [Build 567]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\rcc_configuration.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\rcc_configuration.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\source\wlib\系统时钟配置 -I.\source\wlib\delay -I..\uvsion -I"D:\Program Files\keil4.14\ARM\INC" -I"D:\Program Files\keil4.14\ARM\INC\ST\STM32F10x" -D__MICROLIB --omf_browse=.\obj\rcc_configuration.crf source\wlib\系统时钟配置\RCC_Configuration.c]
                          THUMB

                          AREA ||i.RCC_Configuration||, CODE, READONLY, ALIGN=2

                  RCC_Configuration PROC
;;;5      
;;;6      void RCC_Configuration(void)
000000  b510              PUSH     {r4,lr}
;;;7      {   
;;;8        /* RCC system reset(for debug purpose) */
;;;9        RCC_DeInit();	//系统时钟复位
000002  f7fffffe          BL       RCC_DeInit
;;;10     
;;;11       /* Enable HSE */
;;;12       RCC_HSEConfig(RCC_HSE_ON);   //开外部时钟
000006  f44f3080          MOV      r0,#0x10000
00000a  f7fffffe          BL       RCC_HSEConfig
;;;13     
;;;14       /* Wait till HSE is ready */
;;;15       HSEStartUpStatus = RCC_WaitForHSEStartUp();	 //检测外部时钟是否稳定
00000e  f7fffffe          BL       RCC_WaitForHSEStartUp
000012  4917              LDR      r1,|L1.112|
000014  7008              STRB     r0,[r1,#0]
;;;16     
;;;17       if(HSEStartUpStatus == SUCCESS)			 //如果成功
000016  4608              MOV      r0,r1
000018  7800              LDRB     r0,[r0,#0]  ; HSEStartUpStatus
00001a  2801              CMP      r0,#1
00001c  d126              BNE      |L1.108|
;;;18       {
;;;19         /* Enable Prefetch Buffer */
;;;20         FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);  //开启或关闭预取缓冲区
00001e  2010              MOVS     r0,#0x10
000020  f7fffffe          BL       FLASH_PrefetchBufferCmd
;;;21     
;;;22         /* Flash 2 wait state */
;;;23         FLASH_SetLatency(FLASH_Latency_2);	//设置代码延时值
000024  2002              MOVS     r0,#2
000026  f7fffffe          BL       FLASH_SetLatency
;;;24      	
;;;25         /* HCLK = SYSCLK */
;;;26         RCC_HCLKConfig(RCC_SYSCLK_Div1); 
00002a  2000              MOVS     r0,#0
00002c  f7fffffe          BL       RCC_HCLKConfig
;;;27       
;;;28         /* PCLK2 = HCLK */
;;;29         RCC_PCLK2Config(RCC_HCLK_Div1); 
000030  2000              MOVS     r0,#0
000032  f7fffffe          BL       RCC_PCLK2Config
;;;30     
;;;31         /* PCLK1 = HCLK/2 */
;;;32         RCC_PCLK1Config(RCC_HCLK_Div2);
000036  f44f6080          MOV      r0,#0x400
00003a  f7fffffe          BL       RCC_PCLK1Config
;;;33     
;;;34         /* PLLCLK = 8MHz * 9 = 72 MHz */
;;;35        RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_9);
00003e  f44f11e0          MOV      r1,#0x1c0000
000042  f44f3080          MOV      r0,#0x10000
000046  f7fffffe          BL       RCC_PLLConfig
;;;36     
;;;37         /* Enable PLL */ 
;;;38         RCC_PLLCmd(ENABLE);
00004a  2001              MOVS     r0,#1
00004c  f7fffffe          BL       RCC_PLLCmd
;;;39     
;;;40         /* Wait till PLL is ready */
;;;41         while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET)
000050  bf00              NOP      
                  |L1.82|
000052  2039              MOVS     r0,#0x39
000054  f7fffffe          BL       RCC_GetFlagStatus
000058  2800              CMP      r0,#0
00005a  d0fa              BEQ      |L1.82|
;;;42         {
;;;43         }
;;;44         /* Select PLL as system clock source */
;;;45         RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
00005c  2002              MOVS     r0,#2
00005e  f7fffffe          BL       RCC_SYSCLKConfig
;;;46     
;;;47         /* Wait till PLL is used as system clock source */
;;;48         while(RCC_GetSYSCLKSource() != 0x08)
000062  bf00              NOP      
                  |L1.100|
000064  f7fffffe          BL       RCC_GetSYSCLKSource
000068  2808              CMP      r0,#8
00006a  d1fb              BNE      |L1.100|
                  |L1.108|
;;;49         {
;;;50         }
;;;51       }
;;;52     }
00006c  bd10              POP      {r4,pc}
;;;53     
                          ENDP

00006e  0000              DCW      0x0000
                  |L1.112|
                          DCD      HSEStartUpStatus

                          AREA ||.data||, DATA, ALIGN=0

                  HSEStartUpStatus
000000  00                DCB      0x00
