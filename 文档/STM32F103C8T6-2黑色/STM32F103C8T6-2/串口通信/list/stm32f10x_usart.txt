; generated by ARM C/C++ Compiler, 4.1 [Build 567]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\stm32f10x_usart.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\stm32f10x_usart.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\source\wlib\ÏµÍ³Ê±ÖÓÅäÖÃ -I.\source\wlib\delay -I..\uvsion -I"D:\Program Files\keil4.14\ARM\INC" -I"D:\Program Files\keil4.14\ARM\INC\ST\STM32F10x" -D__MICROLIB --omf_browse=.\obj\stm32f10x_usart.crf source\FWLib\src\stm32f10x_usart.c]
                          THUMB

                          AREA ||i.USART_ClearFlag||, CODE, READONLY, ALIGN=1

                  USART_ClearFlag PROC
;;;866    *******************************************************************************/
;;;867    void USART_ClearFlag(USART_TypeDef* USARTx, u16 USART_FLAG)
000000  43ca              MVNS     r2,r1
;;;868    {
;;;869      /* Check the parameters */
;;;870      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;871      assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
;;;872      assert_param(IS_USART_PERIPH_FLAG(USARTx, USART_FLAG)); /* The CTS flag is not available for UART4 and UART5 */   
;;;873       
;;;874      USARTx->SR = (u16)~USART_FLAG;
000002  8002              STRH     r2,[r0,#0]
;;;875    }
000004  4770              BX       lr
;;;876    
                          ENDP


                          AREA ||i.USART_ClearITPendingBit||, CODE, READONLY, ALIGN=1

                  USART_ClearITPendingBit PROC
;;;973    *******************************************************************************/
;;;974    void USART_ClearITPendingBit(USART_TypeDef* USARTx, u16 USART_IT)
000000  b510              PUSH     {r4,lr}
;;;975    {
;;;976      u16 bitpos = 0x00, itmask = 0x00;
000002  2200              MOVS     r2,#0
000004  2300              MOVS     r3,#0
;;;977    
;;;978      /* Check the parameters */
;;;979      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;980      assert_param(IS_USART_CLEAR_IT(USART_IT));
;;;981      assert_param(IS_USART_PERIPH_IT(USARTx, USART_IT)); /* The CTS interrupt is not available for UART4 and UART5 */
;;;982      
;;;983      bitpos = USART_IT >> 0x08;
000006  120a              ASRS     r2,r1,#8
;;;984    
;;;985      itmask = (u16)((u16)0x01 << bitpos);
000008  2401              MOVS     r4,#1
00000a  4094              LSLS     r4,r4,r2
00000c  b2a3              UXTH     r3,r4
;;;986      USARTx->SR = (u16)~itmask;
00000e  43dc              MVNS     r4,r3
000010  8004              STRH     r4,[r0,#0]
;;;987    }
000012  bd10              POP      {r4,pc}
;;;988    
                          ENDP


                          AREA ||i.USART_ClockInit||, CODE, READONLY, ALIGN=1

                  USART_ClockInit PROC
;;;254    *******************************************************************************/
;;;255    void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
000000  b510              PUSH     {r4,lr}
;;;256    {
000002  4602              MOV      r2,r0
;;;257      u32 tmpreg = 0x00;
000004  2000              MOVS     r0,#0
;;;258    
;;;259      /* Check the parameters */
;;;260      assert_param(IS_USART_123_PERIPH(USARTx));
;;;261      assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
;;;262      assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
;;;263      assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
;;;264      assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));              
;;;265      
;;;266    /*---------------------------- USART CR2 Configuration -----------------------*/
;;;267      tmpreg = USARTx->CR2;
000006  8a10              LDRH     r0,[r2,#0x10]
;;;268      /* Clear CLKEN, CPOL, CPHA and LBCL bits */
;;;269      tmpreg &= CR2_CLOCK_CLEAR_Mask;
000008  f24f03ff          MOV      r3,#0xf0ff
00000c  4018              ANDS     r0,r0,r3
;;;270    
;;;271      /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
;;;272      /* Set CLKEN bit according to USART_Clock value */
;;;273      /* Set CPOL bit according to USART_CPOL value */
;;;274      /* Set CPHA bit according to USART_CPHA value */
;;;275      /* Set LBCL bit according to USART_LastBit value */
;;;276      tmpreg |= (u32)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
00000e  880b              LDRH     r3,[r1,#0]
000010  884c              LDRH     r4,[r1,#2]
000012  4323              ORRS     r3,r3,r4
000014  888c              LDRH     r4,[r1,#4]
000016  4323              ORRS     r3,r3,r4
000018  88cc              LDRH     r4,[r1,#6]
00001a  4323              ORRS     r3,r3,r4
00001c  4318              ORRS     r0,r0,r3
;;;277                     USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
;;;278    
;;;279      /* Write to USART CR2 */
;;;280      USARTx->CR2 = (u16)tmpreg;
00001e  8210              STRH     r0,[r2,#0x10]
;;;281    }
000020  bd10              POP      {r4,pc}
;;;282    
                          ENDP


                          AREA ||i.USART_ClockStructInit||, CODE, READONLY, ALIGN=1

                  USART_ClockStructInit PROC
;;;290    *******************************************************************************/
;;;291    void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
000000  2100              MOVS     r1,#0
;;;292    {
;;;293      /* USART_ClockInitStruct members default value */
;;;294      USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
000002  8001              STRH     r1,[r0,#0]
;;;295      USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
000004  8041              STRH     r1,[r0,#2]
;;;296      USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
000006  8081              STRH     r1,[r0,#4]
;;;297      USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
000008  80c1              STRH     r1,[r0,#6]
;;;298    }
00000a  4770              BX       lr
;;;299    
                          ENDP


                          AREA ||i.USART_Cmd||, CODE, READONLY, ALIGN=1

                  USART_Cmd PROC
;;;310    *******************************************************************************/
;;;311    void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
000000  b121              CBZ      r1,|L5.12|
;;;312    {
;;;313      /* Check the parameters */
;;;314      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;315      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;316      
;;;317      if (NewState != DISABLE)
;;;318      {
;;;319        /* Enable the selected USART by setting the UE bit in the CR1 register */
;;;320        USARTx->CR1 |= CR1_UE_Set;
000002  8982              LDRH     r2,[r0,#0xc]
000004  f4425200          ORR      r2,r2,#0x2000
000008  8182              STRH     r2,[r0,#0xc]
00000a  e004              B        |L5.22|
                  |L5.12|
;;;321      }
;;;322      else
;;;323      {
;;;324        /* Disable the selected USART by clearing the UE bit in the CR1 register */
;;;325        USARTx->CR1 &= CR1_UE_Reset;
00000c  8982              LDRH     r2,[r0,#0xc]
00000e  f64d73ff          MOV      r3,#0xdfff
000012  401a              ANDS     r2,r2,r3
000014  8182              STRH     r2,[r0,#0xc]
                  |L5.22|
;;;326      }
;;;327    }
000016  4770              BX       lr
;;;328    
                          ENDP


                          AREA ||i.USART_DMACmd||, CODE, READONLY, ALIGN=1

                  USART_DMACmd PROC
;;;412    *******************************************************************************/
;;;413    void USART_DMACmd(USART_TypeDef* USARTx, u16 USART_DMAReq, FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;414    {
;;;415      /* Check the parameters */
;;;416      assert_param(IS_USART_1234_PERIPH(USARTx));
;;;417      assert_param(IS_USART_DMAREQ(USART_DMAReq));  
;;;418      assert_param(IS_FUNCTIONAL_STATE(NewState)); 
;;;419    
;;;420      if (NewState != DISABLE)
000002  b11a              CBZ      r2,|L6.12|
;;;421      {
;;;422        /* Enable the DMA transfer for selected requests by setting the DMAT and/or
;;;423           DMAR bits in the USART CR3 register */
;;;424        USARTx->CR3 |= USART_DMAReq;
000004  8a83              LDRH     r3,[r0,#0x14]
000006  430b              ORRS     r3,r3,r1
000008  8283              STRH     r3,[r0,#0x14]
00000a  e004              B        |L6.22|
                  |L6.12|
;;;425      }
;;;426      else
;;;427      {
;;;428        /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
;;;429           DMAR bits in the USART CR3 register */
;;;430        USARTx->CR3 &= (u16)~USART_DMAReq;
00000c  8a83              LDRH     r3,[r0,#0x14]
00000e  43cc              MVNS     r4,r1
000010  b2a4              UXTH     r4,r4
000012  4023              ANDS     r3,r3,r4
000014  8283              STRH     r3,[r0,#0x14]
                  |L6.22|
;;;431      }
;;;432    }
000016  bd10              POP      {r4,pc}
;;;433    
                          ENDP


                          AREA ||i.USART_DeInit||, CODE, READONLY, ALIGN=2

                  USART_DeInit PROC
;;;89     *******************************************************************************/
;;;90     void USART_DeInit(USART_TypeDef* USARTx)
000000  b510              PUSH     {r4,lr}
;;;91     {
000002  4604              MOV      r4,r0
;;;92       /* Check the parameters */
;;;93       assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;94     
;;;95       switch (*(u32*)&USARTx)
000004  4923              LDR      r1,|L7.148|
000006  1a60              SUBS     r0,r4,r1
000008  428c              CMP      r4,r1
00000a  d02b              BEQ      |L7.100|
00000c  dc06              BGT      |L7.28|
00000e  4822              LDR      r0,|L7.152|
000010  1820              ADDS     r0,r4,r0
000012  d013              BEQ      |L7.60|
000014  f5b06f80          CMP      r0,#0x400
000018  d138              BNE      |L7.140|
00001a  e019              B        |L7.80|
                  |L7.28|
00001c  f5b06f80          CMP      r0,#0x400
000020  d02a              BEQ      |L7.120|
000022  f5b04f6c          CMP      r0,#0xec00
000026  d131              BNE      |L7.140|
;;;96       {
;;;97         case USART1_BASE:
;;;98           RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
000028  2101              MOVS     r1,#1
00002a  0388              LSLS     r0,r1,#14
00002c  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;99           RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
000030  2100              MOVS     r1,#0
000032  f44f4080          MOV      r0,#0x4000
000036  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;100          break;
00003a  e028              B        |L7.142|
                  |L7.60|
;;;101    
;;;102        case USART2_BASE:
;;;103          RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
00003c  2101              MOVS     r1,#1
00003e  0448              LSLS     r0,r1,#17
000040  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;104          RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
000044  2100              MOVS     r1,#0
000046  f44f3000          MOV      r0,#0x20000
00004a  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;105          break;
00004e  e01e              B        |L7.142|
                  |L7.80|
;;;106    
;;;107        case USART3_BASE:
;;;108          RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
000050  2101              MOVS     r1,#1
000052  0488              LSLS     r0,r1,#18
000054  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;109          RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
000058  2100              MOVS     r1,#0
00005a  f44f2080          MOV      r0,#0x40000
00005e  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;110          break;
000062  e014              B        |L7.142|
                  |L7.100|
;;;111        
;;;112        case UART4_BASE:
;;;113          RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
000064  2101              MOVS     r1,#1
000066  04c8              LSLS     r0,r1,#19
000068  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;114          RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
00006c  2100              MOVS     r1,#0
00006e  f44f2000          MOV      r0,#0x80000
000072  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;115          break;
000076  e00a              B        |L7.142|
                  |L7.120|
;;;116        
;;;117        case UART5_BASE:
;;;118          RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
000078  2101              MOVS     r1,#1
00007a  0508              LSLS     r0,r1,#20
00007c  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;119          RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
000080  2100              MOVS     r1,#0
000082  f44f1080          MOV      r0,#0x100000
000086  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;120          break;            
00008a  e000              B        |L7.142|
                  |L7.140|
;;;121    
;;;122        default:
;;;123          break;
00008c  bf00              NOP      
                  |L7.142|
00008e  bf00              NOP                            ;100
;;;124      }
;;;125    }
000090  bd10              POP      {r4,pc}
;;;126    
                          ENDP

000092  0000              DCW      0x0000
                  |L7.148|
                          DCD      0x40004c00
                  |L7.152|
                          DCD      0xbfffbc00

                          AREA ||i.USART_GetFlagStatus||, CODE, READONLY, ALIGN=1

                  USART_GetFlagStatus PROC
;;;820    *******************************************************************************/
;;;821    FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, u16 USART_FLAG)
000000  4602              MOV      r2,r0
;;;822    {
;;;823      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;824    
;;;825      /* Check the parameters */
;;;826      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;827      assert_param(IS_USART_FLAG(USART_FLAG));
;;;828      assert_param(IS_USART_PERIPH_FLAG(USARTx, USART_FLAG)); /* The CTS flag is not available for UART4 and UART5 */   
;;;829    
;;;830      if ((USARTx->SR & USART_FLAG) != (u16)RESET)
000004  8813              LDRH     r3,[r2,#0]
000006  420b              TST      r3,r1
000008  d001              BEQ      |L8.14|
;;;831      {
;;;832        bitstatus = SET;
00000a  2001              MOVS     r0,#1
00000c  e000              B        |L8.16|
                  |L8.14|
;;;833      }
;;;834      else
;;;835      {
;;;836        bitstatus = RESET;
00000e  2000              MOVS     r0,#0
                  |L8.16|
;;;837      }
;;;838      return bitstatus;
;;;839    }
000010  4770              BX       lr
;;;840    
                          ENDP


                          AREA ||i.USART_GetITStatus||, CODE, READONLY, ALIGN=1

                  USART_GetITStatus PROC
;;;899    *******************************************************************************/
;;;900    ITStatus USART_GetITStatus(USART_TypeDef* USARTx, u16 USART_IT)
000000  b570              PUSH     {r4-r6,lr}
;;;901    {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;902      u32 bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
000006  2400              MOVS     r4,#0
000008  2100              MOVS     r1,#0
00000a  2500              MOVS     r5,#0
;;;903      ITStatus bitstatus = RESET;
00000c  2000              MOVS     r0,#0
;;;904    
;;;905      /* Check the parameters */
;;;906      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;907      assert_param(IS_USART_IT(USART_IT));
;;;908      assert_param(IS_USART_PERIPH_IT(USARTx, USART_IT)); /* The CTS interrupt is not available for UART4 and UART5 */  
;;;909      
;;;910      /* Get the USART register index */
;;;911      usartreg = (((u8)USART_IT) >> 0x05);
00000e  f3c31542          UBFX     r5,r3,#5,#3
;;;912    
;;;913      /* Get the interrupt position */
;;;914      itmask = USART_IT & IT_Mask;
000012  f003011f          AND      r1,r3,#0x1f
;;;915    
;;;916      itmask = (u32)0x01 << itmask;
000016  2601              MOVS     r6,#1
000018  fa06f101          LSL      r1,r6,r1
;;;917      
;;;918      if (usartreg == 0x01) /* The IT  is in CR1 register */
00001c  2d01              CMP      r5,#1
00001e  d102              BNE      |L9.38|
;;;919      {
;;;920        itmask &= USARTx->CR1;
000020  8996              LDRH     r6,[r2,#0xc]
000022  4031              ANDS     r1,r1,r6
000024  e006              B        |L9.52|
                  |L9.38|
;;;921      }
;;;922      else if (usartreg == 0x02) /* The IT  is in CR2 register */
000026  2d02              CMP      r5,#2
000028  d102              BNE      |L9.48|
;;;923      {
;;;924        itmask &= USARTx->CR2;
00002a  8a16              LDRH     r6,[r2,#0x10]
00002c  4031              ANDS     r1,r1,r6
00002e  e001              B        |L9.52|
                  |L9.48|
;;;925      }
;;;926      else /* The IT  is in CR3 register */
;;;927      {
;;;928        itmask &= USARTx->CR3;
000030  8a96              LDRH     r6,[r2,#0x14]
000032  4031              ANDS     r1,r1,r6
                  |L9.52|
;;;929      }
;;;930      
;;;931      bitpos = USART_IT >> 0x08;
000034  121c              ASRS     r4,r3,#8
;;;932    
;;;933      bitpos = (u32)0x01 << bitpos;
000036  2601              MOVS     r6,#1
000038  fa06f404          LSL      r4,r6,r4
;;;934      bitpos &= USARTx->SR;
00003c  8816              LDRH     r6,[r2,#0]
00003e  4034              ANDS     r4,r4,r6
;;;935    
;;;936      if ((itmask != (u16)RESET)&&(bitpos != (u16)RESET))
000040  b111              CBZ      r1,|L9.72|
000042  b10c              CBZ      r4,|L9.72|
;;;937      {
;;;938        bitstatus = SET;
000044  2001              MOVS     r0,#1
000046  e000              B        |L9.74|
                  |L9.72|
;;;939      }
;;;940      else
;;;941      {
;;;942        bitstatus = RESET;
000048  2000              MOVS     r0,#0
                  |L9.74|
;;;943      }
;;;944      
;;;945      return bitstatus;  
;;;946    }
00004a  bd70              POP      {r4-r6,pc}
;;;947    
                          ENDP


                          AREA ||i.USART_HalfDuplexCmd||, CODE, READONLY, ALIGN=1

                  USART_HalfDuplexCmd PROC
;;;728    *******************************************************************************/
;;;729    void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
000000  b121              CBZ      r1,|L10.12|
;;;730    {
;;;731      /* Check the parameters */
;;;732      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;733      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;734      
;;;735      if (NewState != DISABLE)
;;;736      {
;;;737        /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
;;;738        USARTx->CR3 |= CR3_HDSEL_Set;
000002  8a82              LDRH     r2,[r0,#0x14]
000004  f0420208          ORR      r2,r2,#8
000008  8282              STRH     r2,[r0,#0x14]
00000a  e004              B        |L10.22|
                  |L10.12|
;;;739      }
;;;740      else
;;;741      {
;;;742        /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
;;;743        USARTx->CR3 &= CR3_HDSEL_Reset;
00000c  8a82              LDRH     r2,[r0,#0x14]
00000e  f64f73f7          MOV      r3,#0xfff7
000012  401a              ANDS     r2,r2,r3
000014  8282              STRH     r2,[r0,#0x14]
                  |L10.22|
;;;744      }
;;;745    }
000016  4770              BX       lr
;;;746    
                          ENDP


                          AREA ||i.USART_ITConfig||, CODE, READONLY, ALIGN=1

                  USART_ITConfig PROC
;;;353    *******************************************************************************/
;;;354    void USART_ITConfig(USART_TypeDef* USARTx, u16 USART_IT, FunctionalState NewState)
000000  b5f0              PUSH     {r4-r7,lr}
;;;355    {
000002  4603              MOV      r3,r0
;;;356      u32 usartreg = 0x00, itpos = 0x00, itmask = 0x00;
000004  2400              MOVS     r4,#0
000006  2600              MOVS     r6,#0
000008  2500              MOVS     r5,#0
;;;357      u32 usartxbase = 0x00;
00000a  2000              MOVS     r0,#0
;;;358    
;;;359      /* Check the parameters */
;;;360      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;361      assert_param(IS_USART_CONFIG_IT(USART_IT));
;;;362      assert_param(IS_USART_PERIPH_IT(USARTx, USART_IT)); /* The CTS interrupt is not available for UART4 and UART5 */     
;;;363      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;364    
;;;365      usartxbase = (*(u32*)&(USARTx));
00000c  4618              MOV      r0,r3
;;;366    
;;;367      /* Get the USART register index */
;;;368      usartreg = (((u8)USART_IT) >> 0x05);
00000e  f3c11442          UBFX     r4,r1,#5,#3
;;;369    
;;;370      /* Get the interrupt position */
;;;371      itpos = USART_IT & IT_Mask;
000012  f001061f          AND      r6,r1,#0x1f
;;;372    
;;;373      itmask = (((u32)0x01) << itpos);
000016  2701              MOVS     r7,#1
000018  fa07f506          LSL      r5,r7,r6
;;;374        
;;;375      if (usartreg == 0x01) /* The IT is in CR1 register */
00001c  2c01              CMP      r4,#1
00001e  d101              BNE      |L11.36|
;;;376      {
;;;377        usartxbase += 0x0C;
000020  300c              ADDS     r0,r0,#0xc
000022  e004              B        |L11.46|
                  |L11.36|
;;;378      }
;;;379      else if (usartreg == 0x02) /* The IT is in CR2 register */
000024  2c02              CMP      r4,#2
000026  d101              BNE      |L11.44|
;;;380      {
;;;381        usartxbase += 0x10;
000028  3010              ADDS     r0,r0,#0x10
00002a  e000              B        |L11.46|
                  |L11.44|
;;;382      }
;;;383      else /* The IT is in CR3 register */
;;;384      {
;;;385        usartxbase += 0x14; 
00002c  3014              ADDS     r0,r0,#0x14
                  |L11.46|
;;;386      }
;;;387      if (NewState != DISABLE)
00002e  b11a              CBZ      r2,|L11.56|
;;;388      {
;;;389        *(vu32*)usartxbase  |= itmask;
000030  6807              LDR      r7,[r0,#0]
000032  432f              ORRS     r7,r7,r5
000034  6007              STR      r7,[r0,#0]
000036  e002              B        |L11.62|
                  |L11.56|
;;;390      }
;;;391      else
;;;392      {
;;;393        *(vu32*)usartxbase &= ~itmask;
000038  6807              LDR      r7,[r0,#0]
00003a  43af              BICS     r7,r7,r5
00003c  6007              STR      r7,[r0,#0]
                  |L11.62|
;;;394      }
;;;395    }
00003e  bdf0              POP      {r4-r7,pc}
;;;396    
                          ENDP


                          AREA ||i.USART_Init||, CODE, READONLY, ALIGN=2

                  USART_Init PROC
;;;139    *******************************************************************************/
;;;140    void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;141    {
000004  b086              SUB      sp,sp,#0x18
000006  4605              MOV      r5,r0
000008  460e              MOV      r6,r1
;;;142      u32 tmpreg = 0x00, apbclock = 0x00;
00000a  2400              MOVS     r4,#0
00000c  46a2              MOV      r10,r4
;;;143      u32 integerdivider = 0x00;
00000e  bf00              NOP      
;;;144      u32 fractionaldivider = 0x00;
000010  bf00              NOP      
;;;145      u32 usartxbase = 0;
000012  2700              MOVS     r7,#0
;;;146      RCC_ClocksTypeDef RCC_ClocksStatus;
;;;147    
;;;148      /* Check the parameters */
;;;149      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;150      assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
;;;151      assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
;;;152      assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
;;;153      assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
;;;154      assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
;;;155      assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
;;;156      /* The hardware flow control is available only for USART1, USART2 and USART3 */          
;;;157      assert_param(IS_USART_PERIPH_HFC(USARTx, USART_InitStruct->USART_HardwareFlowControl));
;;;158      
;;;159      usartxbase = (*(u32*)&USARTx);
000014  462f              MOV      r7,r5
;;;160    
;;;161    /*---------------------------- USART CR2 Configuration -----------------------*/
;;;162      tmpreg = USARTx->CR2;
000016  8a2c              LDRH     r4,[r5,#0x10]
;;;163      /* Clear STOP[13:12] bits */
;;;164      tmpreg &= CR2_STOP_CLEAR_Mask;
000018  f64c70ff          MOV      r0,#0xcfff
00001c  4004              ANDS     r4,r4,r0
;;;165    
;;;166      /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
;;;167      /* Set STOP[13:12] bits according to USART_StopBits value */
;;;168      tmpreg |= (u32)USART_InitStruct->USART_StopBits;
00001e  88f0              LDRH     r0,[r6,#6]
000020  4304              ORRS     r4,r4,r0
;;;169      
;;;170      /* Write to USART CR2 */
;;;171      USARTx->CR2 = (u16)tmpreg;
000022  822c              STRH     r4,[r5,#0x10]
;;;172    
;;;173    /*---------------------------- USART CR1 Configuration -----------------------*/
;;;174      tmpreg = USARTx->CR1;
000024  89ac              LDRH     r4,[r5,#0xc]
;;;175      /* Clear M, PCE, PS, TE and RE bits */
;;;176      tmpreg &= CR1_CLEAR_Mask;
000026  f64e10f3          MOV      r0,#0xe9f3
00002a  4004              ANDS     r4,r4,r0
;;;177    
;;;178      /* Configure the USART Word Length, Parity and mode ----------------------- */
;;;179      /* Set the M bits according to USART_WordLength value */
;;;180      /* Set PCE and PS bits according to USART_Parity value */
;;;181      /* Set TE and RE bits according to USART_Mode value */
;;;182      tmpreg |= (u32)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
00002c  88b0              LDRH     r0,[r6,#4]
00002e  8931              LDRH     r1,[r6,#8]
000030  4308              ORRS     r0,r0,r1
000032  8971              LDRH     r1,[r6,#0xa]
000034  4308              ORRS     r0,r0,r1
000036  4304              ORRS     r4,r4,r0
;;;183                USART_InitStruct->USART_Mode;
;;;184    
;;;185      /* Write to USART CR1 */
;;;186      USARTx->CR1 = (u16)tmpreg;
000038  81ac              STRH     r4,[r5,#0xc]
;;;187    
;;;188    /*---------------------------- USART CR3 Configuration -----------------------*/  
;;;189      tmpreg = USARTx->CR3;
00003a  8aac              LDRH     r4,[r5,#0x14]
;;;190      /* Clear CTSE and RTSE bits */
;;;191      tmpreg &= CR3_CLEAR_Mask;
00003c  f64f40ff          MOV      r0,#0xfcff
000040  4004              ANDS     r4,r4,r0
;;;192    
;;;193      /* Configure the USART HFC -------------------------------------------------*/
;;;194      /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
;;;195      tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
000042  89b0              LDRH     r0,[r6,#0xc]
000044  4304              ORRS     r4,r4,r0
;;;196    
;;;197      /* Write to USART CR3 */
;;;198      USARTx->CR3 = (u16)tmpreg;
000046  82ac              STRH     r4,[r5,#0x14]
;;;199    
;;;200    /*---------------------------- USART BRR Configuration -----------------------*/
;;;201      /* Configure the USART Baud Rate -------------------------------------------*/
;;;202      RCC_GetClocksFreq(&RCC_ClocksStatus);
000048  a801              ADD      r0,sp,#4
00004a  f7fffffe          BL       RCC_GetClocksFreq
;;;203      if (usartxbase == USART1_BASE)
00004e  4812              LDR      r0,|L12.152|
000050  4287              CMP      r7,r0
000052  d102              BNE      |L12.90|
;;;204      {
;;;205        apbclock = RCC_ClocksStatus.PCLK2_Frequency;
000054  f8dda010          LDR      r10,[sp,#0x10]
000058  e001              B        |L12.94|
                  |L12.90|
;;;206      }
;;;207      else
;;;208      {
;;;209        apbclock = RCC_ClocksStatus.PCLK1_Frequency;
00005a  f8dda00c          LDR      r10,[sp,#0xc]
                  |L12.94|
;;;210      }
;;;211    
;;;212      /* Determine the integer part */
;;;213      integerdivider = ((0x19 * apbclock) / (0x04 * (USART_InitStruct->USART_BaudRate)));
00005e  eb0a00ca          ADD      r0,r10,r10,LSL #3
000062  eb00100a          ADD      r0,r0,r10,LSL #4
000066  6831              LDR      r1,[r6,#0]
000068  0089              LSLS     r1,r1,#2
00006a  fbb0f8f1          UDIV     r8,r0,r1
;;;214      tmpreg = (integerdivider / 0x64) << 0x04;
00006e  2064              MOVS     r0,#0x64
000070  fbb8f0f0          UDIV     r0,r8,r0
000074  0104              LSLS     r4,r0,#4
;;;215    
;;;216      /* Determine the fractional part */
;;;217      fractionaldivider = integerdivider - (0x64 * (tmpreg >> 0x04));
000076  0920              LSRS     r0,r4,#4
000078  2164              MOVS     r1,#0x64
00007a  fb018910          MLS      r9,r1,r0,r8
;;;218      tmpreg |= ((((fractionaldivider * 0x10) + 0x32) / 0x64)) & ((u8)0x0F);
00007e  2032              MOVS     r0,#0x32
000080  eb001009          ADD      r0,r0,r9,LSL #4
000084  fbb0f0f1          UDIV     r0,r0,r1
000088  f000000f          AND      r0,r0,#0xf
00008c  4304              ORRS     r4,r4,r0
;;;219    
;;;220      /* Write to USART BRR */
;;;221      USARTx->BRR = (u16)tmpreg;
00008e  812c              STRH     r4,[r5,#8]
;;;222    }
000090  b006              ADD      sp,sp,#0x18
000092  e8bd87f0          POP      {r4-r10,pc}
;;;223    
                          ENDP

000096  0000              DCW      0x0000
                  |L12.152|
                          DCD      0x40013800

                          AREA ||i.USART_IrDACmd||, CODE, READONLY, ALIGN=1

                  USART_IrDACmd PROC
;;;780    *******************************************************************************/
;;;781    void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
000000  b121              CBZ      r1,|L13.12|
;;;782    {
;;;783      /* Check the parameters */
;;;784      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;785      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;786        
;;;787      if (NewState != DISABLE)
;;;788      {
;;;789        /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
;;;790        USARTx->CR3 |= CR3_IREN_Set;
000002  8a82              LDRH     r2,[r0,#0x14]
000004  f0420202          ORR      r2,r2,#2
000008  8282              STRH     r2,[r0,#0x14]
00000a  e004              B        |L13.22|
                  |L13.12|
;;;791      }
;;;792      else
;;;793      {
;;;794        /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
;;;795        USARTx->CR3 &= CR3_IREN_Reset;
00000c  8a82              LDRH     r2,[r0,#0x14]
00000e  f64f73fd          MOV      r3,#0xfffd
000012  401a              ANDS     r2,r2,r3
000014  8282              STRH     r2,[r0,#0x14]
                  |L13.22|
;;;796      }
;;;797    }
000016  4770              BX       lr
;;;798    
                          ENDP


                          AREA ||i.USART_IrDAConfig||, CODE, READONLY, ALIGN=1

                  USART_IrDAConfig PROC
;;;759    *******************************************************************************/
;;;760    void USART_IrDAConfig(USART_TypeDef* USARTx, u16 USART_IrDAMode)
000000  8a82              LDRH     r2,[r0,#0x14]
;;;761    {
;;;762      /* Check the parameters */
;;;763      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;764      assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
;;;765        
;;;766      USARTx->CR3 &= CR3_IRLP_Mask;
000002  f64f73fb          MOV      r3,#0xfffb
000006  401a              ANDS     r2,r2,r3
000008  8282              STRH     r2,[r0,#0x14]
;;;767      USARTx->CR3 |= USART_IrDAMode;
00000a  8a82              LDRH     r2,[r0,#0x14]
00000c  430a              ORRS     r2,r2,r1
00000e  8282              STRH     r2,[r0,#0x14]
;;;768    }
000010  4770              BX       lr
;;;769    
                          ENDP


                          AREA ||i.USART_LINBreakDetectLengthConfig||, CODE, READONLY, ALIGN=1

                  USART_LINBreakDetectLengthConfig PROC
;;;521    *******************************************************************************/
;;;522    void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, u16 USART_LINBreakDetectLength)
000000  8a02              LDRH     r2,[r0,#0x10]
;;;523    {
;;;524      /* Check the parameters */
;;;525      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;526      assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
;;;527      
;;;528      USARTx->CR2 &= CR2_LBDL_Mask;
000002  f64f73df          MOV      r3,#0xffdf
000006  401a              ANDS     r2,r2,r3
000008  8202              STRH     r2,[r0,#0x10]
;;;529      USARTx->CR2 |= USART_LINBreakDetectLength;  
00000a  8a02              LDRH     r2,[r0,#0x10]
00000c  430a              ORRS     r2,r2,r1
00000e  8202              STRH     r2,[r0,#0x10]
;;;530    }
000010  4770              BX       lr
;;;531    
                          ENDP


                          AREA ||i.USART_LINCmd||, CODE, READONLY, ALIGN=1

                  USART_LINCmd PROC
;;;542    *******************************************************************************/
;;;543    void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
000000  b121              CBZ      r1,|L16.12|
;;;544    {
;;;545      /* Check the parameters */
;;;546      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;547      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;548      
;;;549      if (NewState != DISABLE)
;;;550      {
;;;551        /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
;;;552        USARTx->CR2 |= CR2_LINEN_Set;
000002  8a02              LDRH     r2,[r0,#0x10]
000004  f4424280          ORR      r2,r2,#0x4000
000008  8202              STRH     r2,[r0,#0x10]
00000a  e004              B        |L16.22|
                  |L16.12|
;;;553      }
;;;554      else
;;;555      {
;;;556        /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
;;;557        USARTx->CR2 &= CR2_LINEN_Reset;
00000c  8a02              LDRH     r2,[r0,#0x10]
00000e  f64b73ff          MOV      r3,#0xbfff
000012  401a              ANDS     r2,r2,r3
000014  8202              STRH     r2,[r0,#0x10]
                  |L16.22|
;;;558      }
;;;559    }
000016  4770              BX       lr
;;;560    
                          ENDP


                          AREA ||i.USART_ReceiveData||, CODE, READONLY, ALIGN=1

                  USART_ReceiveData PROC
;;;589    *******************************************************************************/
;;;590    u16 USART_ReceiveData(USART_TypeDef* USARTx)
000000  4601              MOV      r1,r0
;;;591    {
;;;592      /* Check the parameters */
;;;593      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;594      
;;;595      /* Receive Data */
;;;596      return (u16)(USARTx->DR & (u16)0x01FF);
000002  8888              LDRH     r0,[r1,#4]
000004  f3c00008          UBFX     r0,r0,#0,#9
;;;597    }
000008  4770              BX       lr
;;;598    
                          ENDP


                          AREA ||i.USART_ReceiverWakeUpCmd||, CODE, READONLY, ALIGN=1

                  USART_ReceiverWakeUpCmd PROC
;;;489    *******************************************************************************/
;;;490    void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
000000  b121              CBZ      r1,|L18.12|
;;;491    {
;;;492      /* Check the parameters */
;;;493      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;494      assert_param(IS_FUNCTIONAL_STATE(NewState)); 
;;;495      
;;;496      if (NewState != DISABLE)
;;;497      {
;;;498        /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
;;;499        USARTx->CR1 |= CR1_RWU_Set;
000002  8982              LDRH     r2,[r0,#0xc]
000004  f0420202          ORR      r2,r2,#2
000008  8182              STRH     r2,[r0,#0xc]
00000a  e004              B        |L18.22|
                  |L18.12|
;;;500      }
;;;501      else
;;;502      {
;;;503        /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
;;;504        USARTx->CR1 &= CR1_RWU_Reset;
00000c  8982              LDRH     r2,[r0,#0xc]
00000e  f64f73fd          MOV      r3,#0xfffd
000012  401a              ANDS     r2,r2,r3
000014  8182              STRH     r2,[r0,#0xc]
                  |L18.22|
;;;505      }
;;;506    }
000016  4770              BX       lr
;;;507    
                          ENDP


                          AREA ||i.USART_SendBreak||, CODE, READONLY, ALIGN=1

                  USART_SendBreak PROC
;;;607    *******************************************************************************/
;;;608    void USART_SendBreak(USART_TypeDef* USARTx)
000000  8981              LDRH     r1,[r0,#0xc]
;;;609    {
;;;610      /* Check the parameters */
;;;611      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;612      
;;;613      /* Send break characters */
;;;614      USARTx->CR1 |= CR1_SBK_Set;
000002  f0410101          ORR      r1,r1,#1
000006  8181              STRH     r1,[r0,#0xc]
;;;615    }
000008  4770              BX       lr
;;;616    
                          ENDP


                          AREA ||i.USART_SendData||, CODE, READONLY, ALIGN=1

                  USART_SendData PROC
;;;570    *******************************************************************************/
;;;571    void USART_SendData(USART_TypeDef* USARTx, u16 Data)
000000  f3c10208          UBFX     r2,r1,#0,#9
;;;572    {
;;;573      /* Check the parameters */
;;;574      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;575      assert_param(IS_USART_DATA(Data)); 
;;;576        
;;;577      /* Transmit Data */
;;;578      USARTx->DR = (Data & (u16)0x01FF);
000004  8082              STRH     r2,[r0,#4]
;;;579    }
000006  4770              BX       lr
;;;580    
                          ENDP


                          AREA ||i.USART_SetAddress||, CODE, READONLY, ALIGN=1

                  USART_SetAddress PROC
;;;443    *******************************************************************************/
;;;444    void USART_SetAddress(USART_TypeDef* USARTx, u8 USART_Address)
000000  8a02              LDRH     r2,[r0,#0x10]
;;;445    {
;;;446      /* Check the parameters */
;;;447      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;448      assert_param(IS_USART_ADDRESS(USART_Address)); 
;;;449        
;;;450      /* Clear the USART address */
;;;451      USARTx->CR2 &= CR2_Address_Mask;
000002  f64f73f0          MOV      r3,#0xfff0
000006  401a              ANDS     r2,r2,r3
000008  8202              STRH     r2,[r0,#0x10]
;;;452      /* Set the USART address node */
;;;453      USARTx->CR2 |= USART_Address;
00000a  8a02              LDRH     r2,[r0,#0x10]
00000c  430a              ORRS     r2,r2,r1
00000e  8202              STRH     r2,[r0,#0x10]
;;;454    }
000010  4770              BX       lr
;;;455    
                          ENDP


                          AREA ||i.USART_SetGuardTime||, CODE, READONLY, ALIGN=1

                  USART_SetGuardTime PROC
;;;626    *******************************************************************************/
;;;627    void USART_SetGuardTime(USART_TypeDef* USARTx, u8 USART_GuardTime)
000000  8b02              LDRH     r2,[r0,#0x18]
;;;628    {    
;;;629      /* Check the parameters */
;;;630      assert_param(IS_USART_123_PERIPH(USARTx));
;;;631      
;;;632      /* Clear the USART Guard time */
;;;633      USARTx->GTPR &= GTPR_LSB_Mask;
000002  b2d2              UXTB     r2,r2
000004  8302              STRH     r2,[r0,#0x18]
;;;634      /* Set the USART guard time */
;;;635      USARTx->GTPR |= (u16)((u16)USART_GuardTime << 0x08);
000006  8b02              LDRH     r2,[r0,#0x18]
000008  ea422201          ORR      r2,r2,r1,LSL #8
00000c  8302              STRH     r2,[r0,#0x18]
;;;636    }
00000e  4770              BX       lr
;;;637    
                          ENDP


                          AREA ||i.USART_SetPrescaler||, CODE, READONLY, ALIGN=1

                  USART_SetPrescaler PROC
;;;648    *******************************************************************************/
;;;649    void USART_SetPrescaler(USART_TypeDef* USARTx, u8 USART_Prescaler)
000000  8b02              LDRH     r2,[r0,#0x18]
;;;650    { 
;;;651      /* Check the parameters */
;;;652      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;653      
;;;654      /* Clear the USART prescaler */
;;;655      USARTx->GTPR &= GTPR_MSB_Mask;
000002  f402427f          AND      r2,r2,#0xff00
000006  8302              STRH     r2,[r0,#0x18]
;;;656      /* Set the USART prescaler */
;;;657      USARTx->GTPR |= USART_Prescaler;
000008  8b02              LDRH     r2,[r0,#0x18]
00000a  430a              ORRS     r2,r2,r1
00000c  8302              STRH     r2,[r0,#0x18]
;;;658    }
00000e  4770              BX       lr
;;;659    
                          ENDP


                          AREA ||i.USART_SmartCardCmd||, CODE, READONLY, ALIGN=1

                  USART_SmartCardCmd PROC
;;;670    *******************************************************************************/
;;;671    void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
000000  b121              CBZ      r1,|L24.12|
;;;672    {
;;;673      /* Check the parameters */
;;;674      assert_param(IS_USART_123_PERIPH(USARTx));
;;;675      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;676    
;;;677      if (NewState != DISABLE)
;;;678      {
;;;679        /* Enable the SC mode by setting the SCEN bit in the CR3 register */
;;;680        USARTx->CR3 |= CR3_SCEN_Set;
000002  8a82              LDRH     r2,[r0,#0x14]
000004  f0420220          ORR      r2,r2,#0x20
000008  8282              STRH     r2,[r0,#0x14]
00000a  e004              B        |L24.22|
                  |L24.12|
;;;681      }
;;;682      else
;;;683      {
;;;684        /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
;;;685        USARTx->CR3 &= CR3_SCEN_Reset;
00000c  8a82              LDRH     r2,[r0,#0x14]
00000e  f64f73df          MOV      r3,#0xffdf
000012  401a              ANDS     r2,r2,r3
000014  8282              STRH     r2,[r0,#0x14]
                  |L24.22|
;;;686      }
;;;687    }
000016  4770              BX       lr
;;;688    
                          ENDP


                          AREA ||i.USART_SmartCardNACKCmd||, CODE, READONLY, ALIGN=1

                  USART_SmartCardNACKCmd PROC
;;;699    *******************************************************************************/
;;;700    void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
000000  b121              CBZ      r1,|L25.12|
;;;701    {
;;;702      /* Check the parameters */
;;;703      assert_param(IS_USART_123_PERIPH(USARTx));  
;;;704      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;705    
;;;706      if (NewState != DISABLE)
;;;707      {
;;;708        /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
;;;709        USARTx->CR3 |= CR3_NACK_Set;
000002  8a82              LDRH     r2,[r0,#0x14]
000004  f0420210          ORR      r2,r2,#0x10
000008  8282              STRH     r2,[r0,#0x14]
00000a  e004              B        |L25.22|
                  |L25.12|
;;;710      }
;;;711      else
;;;712      {
;;;713        /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
;;;714        USARTx->CR3 &= CR3_NACK_Reset;
00000c  8a82              LDRH     r2,[r0,#0x14]
00000e  f64f73ef          MOV      r3,#0xffef
000012  401a              ANDS     r2,r2,r3
000014  8282              STRH     r2,[r0,#0x14]
                  |L25.22|
;;;715      }
;;;716    }
000016  4770              BX       lr
;;;717    
                          ENDP


                          AREA ||i.USART_StructInit||, CODE, READONLY, ALIGN=1

                  USART_StructInit PROC
;;;231    *******************************************************************************/
;;;232    void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
000000  f44f5116          MOV      r1,#0x2580
;;;233    {
;;;234      /* USART_InitStruct members default value */
;;;235      USART_InitStruct->USART_BaudRate = 9600;
000004  6001              STR      r1,[r0,#0]
;;;236      USART_InitStruct->USART_WordLength = USART_WordLength_8b;
000006  2100              MOVS     r1,#0
000008  8081              STRH     r1,[r0,#4]
;;;237      USART_InitStruct->USART_StopBits = USART_StopBits_1;
00000a  80c1              STRH     r1,[r0,#6]
;;;238      USART_InitStruct->USART_Parity = USART_Parity_No ;
00000c  8101              STRH     r1,[r0,#8]
;;;239      USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
00000e  210c              MOVS     r1,#0xc
000010  8141              STRH     r1,[r0,#0xa]
;;;240      USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
000012  2100              MOVS     r1,#0
000014  8181              STRH     r1,[r0,#0xc]
;;;241    }
000016  4770              BX       lr
;;;242    
                          ENDP


                          AREA ||i.USART_WakeUpConfig||, CODE, READONLY, ALIGN=1

                  USART_WakeUpConfig PROC
;;;468    *******************************************************************************/
;;;469    void USART_WakeUpConfig(USART_TypeDef* USARTx, u16 USART_WakeUp)
000000  8982              LDRH     r2,[r0,#0xc]
;;;470    {
;;;471      /* Check the parameters */
;;;472      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;473      assert_param(IS_USART_WAKEUP(USART_WakeUp));
;;;474      
;;;475      USARTx->CR1 &= CR1_WAKE_Mask;
000002  f24f73ff          MOV      r3,#0xf7ff
000006  401a              ANDS     r2,r2,r3
000008  8182              STRH     r2,[r0,#0xc]
;;;476      USARTx->CR1 |= USART_WakeUp;
00000a  8982              LDRH     r2,[r0,#0xc]
00000c  430a              ORRS     r2,r2,r1
00000e  8182              STRH     r2,[r0,#0xc]
;;;477    }
000010  4770              BX       lr
;;;478    
                          ENDP

