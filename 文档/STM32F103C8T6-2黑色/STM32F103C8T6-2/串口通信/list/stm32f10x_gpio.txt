; generated by ARM C/C++ Compiler, 4.1 [Build 567]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\stm32f10x_gpio.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\stm32f10x_gpio.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\source\wlib\œµÕ≥ ±÷”≈‰÷√ -I.\source\wlib\delay -I..\uvsion -I"D:\Program Files\keil4.14\ARM\INC" -I"D:\Program Files\keil4.14\ARM\INC\ST\STM32F10x" -D__MICROLIB --omf_browse=.\obj\stm32f10x_gpio.crf source\FWLib\src\stm32f10x_gpio.c]
                          THUMB

                          AREA ||i.GPIO_AFIODeInit||, CODE, READONLY, ALIGN=1

                  GPIO_AFIODeInit PROC
;;;106    *******************************************************************************/
;;;107    void GPIO_AFIODeInit(void)
000000  b510              PUSH     {r4,lr}
;;;108    {
;;;109      RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
000002  2101              MOVS     r1,#1
000004  4608              MOV      r0,r1
000006  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;110      RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
00000a  2100              MOVS     r1,#0
00000c  2001              MOVS     r0,#1
00000e  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;111    }
000012  bd10              POP      {r4,pc}
;;;112    
                          ENDP


                          AREA ||i.GPIO_DeInit||, CODE, READONLY, ALIGN=2

                  GPIO_DeInit PROC
;;;50     *******************************************************************************/
;;;51     void GPIO_DeInit(GPIO_TypeDef* GPIOx)
000000  b510              PUSH     {r4,lr}
;;;52     {
000002  4604              MOV      r4,r0
;;;53       /* Check the parameters */
;;;54       assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;55       
;;;56       switch (*(u32*)&GPIOx)
000004  492d              LDR      r1,|L2.188|
000006  1a60              SUBS     r0,r4,r1
000008  428c              CMP      r4,r1
00000a  d02f              BEQ      |L2.108|
00000c  dc09              BGT      |L2.34|
00000e  482c              LDR      r0,|L2.192|
000010  1820              ADDS     r0,r4,r0
000012  d010              BEQ      |L2.54|
000014  f5b06f80          CMP      r0,#0x400
000018  d016              BEQ      |L2.72|
00001a  f5b06f00          CMP      r0,#0x800
00001e  d14a              BNE      |L2.182|
000020  e01b              B        |L2.90|
                  |L2.34|
000022  f5b06f80          CMP      r0,#0x400
000026  d02a              BEQ      |L2.126|
000028  f5b06f00          CMP      r0,#0x800
00002c  d030              BEQ      |L2.144|
00002e  f5b06f40          CMP      r0,#0xc00
000032  d140              BNE      |L2.182|
000034  e035              B        |L2.162|
                  |L2.54|
;;;57       {
;;;58         case GPIOA_BASE:
;;;59           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
000036  2101              MOVS     r1,#1
000038  2004              MOVS     r0,#4
00003a  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;60           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
00003e  2100              MOVS     r1,#0
000040  2004              MOVS     r0,#4
000042  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;61           break;
000046  e037              B        |L2.184|
                  |L2.72|
;;;62     
;;;63         case GPIOB_BASE:
;;;64           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
000048  2101              MOVS     r1,#1
00004a  2008              MOVS     r0,#8
00004c  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;65           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
000050  2100              MOVS     r1,#0
000052  2008              MOVS     r0,#8
000054  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;66           break;
000058  e02e              B        |L2.184|
                  |L2.90|
;;;67     
;;;68         case GPIOC_BASE:
;;;69           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
00005a  2101              MOVS     r1,#1
00005c  2010              MOVS     r0,#0x10
00005e  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;70           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
000062  2100              MOVS     r1,#0
000064  2010              MOVS     r0,#0x10
000066  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;71           break;
00006a  e025              B        |L2.184|
                  |L2.108|
;;;72     
;;;73         case GPIOD_BASE:
;;;74           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
00006c  2101              MOVS     r1,#1
00006e  2020              MOVS     r0,#0x20
000070  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;75           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
000074  2100              MOVS     r1,#0
000076  2020              MOVS     r0,#0x20
000078  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;76           break;
00007c  e01c              B        |L2.184|
                  |L2.126|
;;;77           
;;;78         case GPIOE_BASE:
;;;79           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
00007e  2101              MOVS     r1,#1
000080  2040              MOVS     r0,#0x40
000082  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;80           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
000086  2100              MOVS     r1,#0
000088  2040              MOVS     r0,#0x40
00008a  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;81           break; 
00008e  e013              B        |L2.184|
                  |L2.144|
;;;82     
;;;83         case GPIOF_BASE:
;;;84           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
000090  2101              MOVS     r1,#1
000092  2080              MOVS     r0,#0x80
000094  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;85           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
000098  2100              MOVS     r1,#0
00009a  2080              MOVS     r0,#0x80
00009c  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;86           break;
0000a0  e00a              B        |L2.184|
                  |L2.162|
;;;87     
;;;88         case GPIOG_BASE:
;;;89           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
0000a2  2101              MOVS     r1,#1
0000a4  0208              LSLS     r0,r1,#8
0000a6  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;90           RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
0000aa  2100              MOVS     r1,#0
0000ac  f44f7080          MOV      r0,#0x100
0000b0  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;91           break;                       
0000b4  e000              B        |L2.184|
                  |L2.182|
;;;92     
;;;93         default:
;;;94           break;
0000b6  bf00              NOP      
                  |L2.184|
0000b8  bf00              NOP                            ;61
;;;95       }
;;;96     }
0000ba  bd10              POP      {r4,pc}
;;;97     
                          ENDP

                  |L2.188|
                          DCD      0x40011400
                  |L2.192|
                          DCD      0xbffef800

                          AREA ||i.GPIO_EXTILineConfig||, CODE, READONLY, ALIGN=2

                  GPIO_EXTILineConfig PROC
;;;565    *******************************************************************************/
;;;566    void GPIO_EXTILineConfig(u8 GPIO_PortSource, u8 GPIO_PinSource)
000000  b530              PUSH     {r4,r5,lr}
;;;567    {
;;;568      u32 tmp = 0x00;
000002  2200              MOVS     r2,#0
;;;569    
;;;570      /* Check the parameters */
;;;571      assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
;;;572      assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
;;;573      
;;;574      tmp = ((u32)0x0F) << (0x04 * (GPIO_PinSource & (u8)0x03));
000004  078b              LSLS     r3,r1,#30
000006  0f1c              LSRS     r4,r3,#28
000008  230f              MOVS     r3,#0xf
00000a  fa03f204          LSL      r2,r3,r4
;;;575    
;;;576      AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
00000e  4b0b              LDR      r3,|L3.60|
000010  108c              ASRS     r4,r1,#2
000012  f8533024          LDR      r3,[r3,r4,LSL #2]
000016  4393              BICS     r3,r3,r2
000018  4c08              LDR      r4,|L3.60|
00001a  108d              ASRS     r5,r1,#2
00001c  f8443025          STR      r3,[r4,r5,LSL #2]
;;;577      AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((u32)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (u8)0x03)));
000020  4623              MOV      r3,r4
000022  108c              ASRS     r4,r1,#2
000024  f8533024          LDR      r3,[r3,r4,LSL #2]
000028  078c              LSLS     r4,r1,#30
00002a  0f24              LSRS     r4,r4,#28
00002c  fa00f404          LSL      r4,r0,r4
000030  4323              ORRS     r3,r3,r4
000032  4c02              LDR      r4,|L3.60|
000034  108d              ASRS     r5,r1,#2
000036  f8443025          STR      r3,[r4,r5,LSL #2]
;;;578    }
00003a  bd30              POP      {r4,r5,pc}
;;;579    
                          ENDP

                  |L3.60|
                          DCD      0x40010008

                          AREA ||i.GPIO_EventOutputCmd||, CODE, READONLY, ALIGN=2

                  GPIO_EventOutputCmd PROC
;;;472    *******************************************************************************/
;;;473    void GPIO_EventOutputCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L4.8|
;;;474    {
;;;475      /* Check the parameters */
;;;476      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;477      
;;;478      *(vu32 *) EVCR_EVOE_BB = (u32)NewState;
000002  61c8              STR      r0,[r1,#0x1c]
;;;479    }
000004  4770              BX       lr
;;;480    
                          ENDP

000006  0000              DCW      0x0000
                  |L4.8|
                          DCD      0x42200000

                          AREA ||i.GPIO_EventOutputConfig||, CODE, READONLY, ALIGN=2

                  GPIO_EventOutputConfig PROC
;;;447    *******************************************************************************/
;;;448    void GPIO_EventOutputConfig(u8 GPIO_PortSource, u8 GPIO_PinSource)
000000  4602              MOV      r2,r0
;;;449    {
;;;450      u32 tmpreg = 0x00;
000002  2000              MOVS     r0,#0
;;;451    
;;;452      /* Check the parameters */
;;;453      assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
;;;454      assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
;;;455        
;;;456      tmpreg = AFIO->EVCR;
000004  4b05              LDR      r3,|L5.28|
000006  6818              LDR      r0,[r3,#0]
;;;457      /* Clear the PORT[6:4] and PIN[3:0] bits */
;;;458      tmpreg &= EVCR_PORTPINCONFIG_MASK;
000008  f64f7380          MOV      r3,#0xff80
00000c  4018              ANDS     r0,r0,r3
;;;459      tmpreg |= (u32)GPIO_PortSource << 0x04;
00000e  ea401002          ORR      r0,r0,r2,LSL #4
;;;460      tmpreg |= GPIO_PinSource;
000012  4308              ORRS     r0,r0,r1
;;;461    
;;;462      AFIO->EVCR = tmpreg;
000014  4b01              LDR      r3,|L5.28|
000016  6018              STR      r0,[r3,#0]
;;;463    }
000018  4770              BX       lr
;;;464    
                          ENDP

00001a  0000              DCW      0x0000
                  |L5.28|
                          DCD      0x40010000

                          AREA ||i.GPIO_Init||, CODE, READONLY, ALIGN=1

                  GPIO_Init PROC
;;;123    *******************************************************************************/
;;;124    void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;125    {
000004  4602              MOV      r2,r0
;;;126      u32 currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
000006  2500              MOVS     r5,#0
000008  2600              MOVS     r6,#0
00000a  2000              MOVS     r0,#0
00000c  2300              MOVS     r3,#0
;;;127      u32 tmpreg = 0x00, pinmask = 0x00;
00000e  2400              MOVS     r4,#0
000010  2700              MOVS     r7,#0
;;;128    
;;;129      /* Check the parameters */
;;;130      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;131      assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
;;;132      assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
;;;133      
;;;134    /*---------------------------- GPIO Mode Configuration -----------------------*/
;;;135      currentmode = ((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x0F);
000012  f891c003          LDRB     r12,[r1,#3]
000016  f00c050f          AND      r5,r12,#0xf
;;;136    
;;;137      if ((((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x10)) != 0x00)
00001a  f891c003          LDRB     r12,[r1,#3]
00001e  f01c0f10          TST      r12,#0x10
000022  d003              BEQ      |L6.44|
;;;138      { 
;;;139        /* Check the parameters */
;;;140        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
;;;141        /* Output mode */
;;;142        currentmode |= (u32)GPIO_InitStruct->GPIO_Speed;
000024  f891c002          LDRB     r12,[r1,#2]
000028  ea4c0505          ORR      r5,r12,r5
                  |L6.44|
;;;143      }
;;;144    
;;;145    /*---------------------------- GPIO CRL Configuration ------------------------*/
;;;146      /* Configure the eight low port pins */
;;;147      if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
00002c  f8b1c000          LDRH     r12,[r1,#0]
000030  f01c0fff          TST      r12,#0xff
000034  d030              BEQ      |L6.152|
;;;148      {
;;;149        tmpreg = GPIOx->CRL;
000036  6814              LDR      r4,[r2,#0]
;;;150    
;;;151        for (pinpos = 0x00; pinpos < 0x08; pinpos++)
000038  2000              MOVS     r0,#0
00003a  e02a              B        |L6.146|
                  |L6.60|
;;;152        {
;;;153          pos = ((u32)0x01) << pinpos;
00003c  f04f0c01          MOV      r12,#1
000040  fa0cf300          LSL      r3,r12,r0
;;;154          /* Get the port pins position */
;;;155          currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
000044  f8b1c000          LDRH     r12,[r1,#0]
000048  ea0c0603          AND      r6,r12,r3
;;;156    
;;;157          if (currentpin == pos)
00004c  429e              CMP      r6,r3
00004e  d11f              BNE      |L6.144|
;;;158          {
;;;159            pos = pinpos << 2;
000050  0083              LSLS     r3,r0,#2
;;;160            /* Clear the corresponding low control register bits */
;;;161            pinmask = ((u32)0x0F) << pos;
000052  f04f0c0f          MOV      r12,#0xf
000056  fa0cf703          LSL      r7,r12,r3
;;;162            tmpreg &= ~pinmask;
00005a  43bc              BICS     r4,r4,r7
;;;163    
;;;164            /* Write the mode configuration in the corresponding bits */
;;;165            tmpreg |= (currentmode << pos);
00005c  fa05fc03          LSL      r12,r5,r3
000060  ea4c0404          ORR      r4,r12,r4
;;;166    
;;;167            /* Reset the corresponding ODR bit */
;;;168            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
000064  f891c003          LDRB     r12,[r1,#3]
000068  f1bc0f28          CMP      r12,#0x28
00006c  d105              BNE      |L6.122|
;;;169            {
;;;170              GPIOx->BRR = (((u32)0x01) << pinpos);
00006e  f04f0c01          MOV      r12,#1
000072  fa0cfc00          LSL      r12,r12,r0
000076  f8c2c014          STR      r12,[r2,#0x14]
                  |L6.122|
;;;171            }
;;;172            /* Set the corresponding ODR bit */
;;;173            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
00007a  f891c003          LDRB     r12,[r1,#3]
00007e  f1bc0f48          CMP      r12,#0x48
000082  d105              BNE      |L6.144|
;;;174            {
;;;175              GPIOx->BSRR = (((u32)0x01) << pinpos);
000084  f04f0c01          MOV      r12,#1
000088  fa0cfc00          LSL      r12,r12,r0
00008c  f8c2c010          STR      r12,[r2,#0x10]
                  |L6.144|
000090  1c40              ADDS     r0,r0,#1              ;151
                  |L6.146|
000092  2808              CMP      r0,#8                 ;151
000094  d3d2              BCC      |L6.60|
;;;176            }
;;;177          }
;;;178        }
;;;179        GPIOx->CRL = tmpreg;
000096  6014              STR      r4,[r2,#0]
                  |L6.152|
;;;180      }
;;;181    
;;;182    /*---------------------------- GPIO CRH Configuration ------------------------*/
;;;183      /* Configure the eight high port pins */
;;;184      if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
000098  f8b1c000          LDRH     r12,[r1,#0]
00009c  f1bc0fff          CMP      r12,#0xff
0000a0  dd34              BLE      |L6.268|
;;;185      {
;;;186        tmpreg = GPIOx->CRH;
0000a2  6854              LDR      r4,[r2,#4]
;;;187        for (pinpos = 0x00; pinpos < 0x08; pinpos++)
0000a4  2000              MOVS     r0,#0
0000a6  e02e              B        |L6.262|
                  |L6.168|
;;;188        {
;;;189          pos = (((u32)0x01) << (pinpos + 0x08));
0000a8  f1000c08          ADD      r12,r0,#8
0000ac  f04f0801          MOV      r8,#1
0000b0  fa08f30c          LSL      r3,r8,r12
;;;190          /* Get the port pins position */
;;;191          currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
0000b4  f8b1c000          LDRH     r12,[r1,#0]
0000b8  ea0c0603          AND      r6,r12,r3
;;;192          if (currentpin == pos)
0000bc  429e              CMP      r6,r3
0000be  d121              BNE      |L6.260|
;;;193          {
;;;194            pos = pinpos << 2;
0000c0  0083              LSLS     r3,r0,#2
;;;195            /* Clear the corresponding high control register bits */
;;;196            pinmask = ((u32)0x0F) << pos;
0000c2  f04f0c0f          MOV      r12,#0xf
0000c6  fa0cf703          LSL      r7,r12,r3
;;;197            tmpreg &= ~pinmask;
0000ca  43bc              BICS     r4,r4,r7
;;;198    
;;;199            /* Write the mode configuration in the corresponding bits */
;;;200            tmpreg |= (currentmode << pos);
0000cc  fa05fc03          LSL      r12,r5,r3
0000d0  ea4c0404          ORR      r4,r12,r4
;;;201    
;;;202            /* Reset the corresponding ODR bit */
;;;203            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
0000d4  f891c003          LDRB     r12,[r1,#3]
0000d8  f1bc0f28          CMP      r12,#0x28
0000dc  d105              BNE      |L6.234|
;;;204            {
;;;205              GPIOx->BRR = (((u32)0x01) << (pinpos + 0x08));
0000de  f1000c08          ADD      r12,r0,#8
0000e2  fa08f80c          LSL      r8,r8,r12
0000e6  f8c28014          STR      r8,[r2,#0x14]
                  |L6.234|
;;;206            }
;;;207            /* Set the corresponding ODR bit */
;;;208            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
0000ea  f891c003          LDRB     r12,[r1,#3]
0000ee  f1bc0f48          CMP      r12,#0x48
0000f2  d107              BNE      |L6.260|
;;;209            {
;;;210              GPIOx->BSRR = (((u32)0x01) << (pinpos + 0x08));
0000f4  f1000c08          ADD      r12,r0,#8
0000f8  f04f0801          MOV      r8,#1
0000fc  fa08f80c          LSL      r8,r8,r12
000100  f8c28010          STR      r8,[r2,#0x10]
                  |L6.260|
000104  1c40              ADDS     r0,r0,#1              ;187
                  |L6.262|
000106  2808              CMP      r0,#8                 ;187
000108  d3ce              BCC      |L6.168|
;;;211            }
;;;212          }
;;;213        }
;;;214        GPIOx->CRH = tmpreg;
00010a  6054              STR      r4,[r2,#4]
                  |L6.268|
;;;215      }
;;;216    }
00010c  e8bd81f0          POP      {r4-r8,pc}
;;;217    
                          ENDP


                          AREA ||i.GPIO_PinLockConfig||, CODE, READONLY, ALIGN=1

                  GPIO_PinLockConfig PROC
;;;414    *******************************************************************************/
;;;415    void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, u16 GPIO_Pin)
000000  f44f3280          MOV      r2,#0x10000
;;;416    {
;;;417      u32 tmp = 0x00010000;
;;;418      
;;;419      /* Check the parameters */
;;;420      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;421      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;422      
;;;423      tmp |= GPIO_Pin;
000004  430a              ORRS     r2,r2,r1
;;;424      /* Set LCKK bit */
;;;425      GPIOx->LCKR = tmp;
000006  6182              STR      r2,[r0,#0x18]
;;;426      /* Reset LCKK bit */
;;;427      GPIOx->LCKR =  GPIO_Pin;
000008  6181              STR      r1,[r0,#0x18]
;;;428      /* Set LCKK bit */
;;;429      GPIOx->LCKR = tmp;
00000a  6182              STR      r2,[r0,#0x18]
;;;430      /* Read LCKK bit*/
;;;431      tmp = GPIOx->LCKR;
00000c  6982              LDR      r2,[r0,#0x18]
;;;432      /* Read LCKK bit*/
;;;433      tmp = GPIOx->LCKR;
00000e  6982              LDR      r2,[r0,#0x18]
;;;434    }
000010  4770              BX       lr
;;;435    
                          ENDP


                          AREA ||i.GPIO_PinRemapConfig||, CODE, READONLY, ALIGN=2

                  GPIO_PinRemapConfig PROC
;;;515    *******************************************************************************/
;;;516    void GPIO_PinRemapConfig(u32 GPIO_Remap, FunctionalState NewState)
000000  b5f0              PUSH     {r4-r7,lr}
;;;517    {
000002  460a              MOV      r2,r1
;;;518      u32 tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
000004  2300              MOVS     r3,#0
000006  2400              MOVS     r4,#0
000008  2100              MOVS     r1,#0
00000a  2500              MOVS     r5,#0
;;;519    
;;;520      /* Check the parameters */
;;;521      assert_param(IS_GPIO_REMAP(GPIO_Remap));
;;;522      assert_param(IS_FUNCTIONAL_STATE(NewState));  
;;;523      
;;;524      tmpreg = AFIO->MAPR;
00000c  4e17              LDR      r6,|L8.108|
00000e  6871              LDR      r1,[r6,#4]
;;;525    
;;;526      tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
000010  f3c04503          UBFX     r5,r0,#16,#4
;;;527      tmp = GPIO_Remap & LSB_MASK;
000014  b283              UXTH     r3,r0
;;;528    
;;;529      if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
000016  f4001640          AND      r6,r0,#0x300000
00001a  f5b61f40          CMP      r6,#0x300000
00001e  d108              BNE      |L8.50|
;;;530      {
;;;531        tmpreg &= DBGAFR_SWJCFG_MASK;
000020  f0216170          BIC      r1,r1,#0xf000000
;;;532        AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
000024  4e11              LDR      r6,|L8.108|
000026  6876              LDR      r6,[r6,#4]
000028  f0266670          BIC      r6,r6,#0xf000000
00002c  4f0f              LDR      r7,|L8.108|
00002e  607e              STR      r6,[r7,#4]
000030  e012              B        |L8.88|
                  |L8.50|
;;;533      }
;;;534      else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
000032  f4001680          AND      r6,r0,#0x100000
000036  f5b61f80          CMP      r6,#0x100000
00003a  d106              BNE      |L8.74|
;;;535      {
;;;536        tmp1 = ((u32)0x03) << tmpmask;
00003c  2603              MOVS     r6,#3
00003e  fa06f405          LSL      r4,r6,r5
;;;537        tmpreg &= ~tmp1;
000042  43a1              BICS     r1,r1,r4
;;;538        tmpreg |= ~DBGAFR_SWJCFG_MASK;
000044  f0416170          ORR      r1,r1,#0xf000000
000048  e006              B        |L8.88|
                  |L8.74|
;;;539      }
;;;540      else
;;;541      {
;;;542        tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
00004a  0d46              LSRS     r6,r0,#21
00004c  0136              LSLS     r6,r6,#4
00004e  fa03f606          LSL      r6,r3,r6
000052  43b1              BICS     r1,r1,r6
;;;543        tmpreg |= ~DBGAFR_SWJCFG_MASK;
000054  f0416170          ORR      r1,r1,#0xf000000
                  |L8.88|
;;;544      }
;;;545    
;;;546      if (NewState != DISABLE)
000058  b122              CBZ      r2,|L8.100|
;;;547      {
;;;548        tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
00005a  0d46              LSRS     r6,r0,#21
00005c  0136              LSLS     r6,r6,#4
00005e  fa03f606          LSL      r6,r3,r6
000062  4331              ORRS     r1,r1,r6
                  |L8.100|
;;;549      }
;;;550    
;;;551      AFIO->MAPR = tmpreg;
000064  4e01              LDR      r6,|L8.108|
000066  6071              STR      r1,[r6,#4]
;;;552    }
000068  bdf0              POP      {r4-r7,pc}
;;;553    
                          ENDP

00006a  0000              DCW      0x0000
                  |L8.108|
                          DCD      0x40010000

                          AREA ||i.GPIO_ReadInputData||, CODE, READONLY, ALIGN=1

                  GPIO_ReadInputData PROC
;;;268    *******************************************************************************/
;;;269    u16 GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
000000  4601              MOV      r1,r0
;;;270    {
;;;271      /* Check the parameters */
;;;272      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;273      
;;;274      return ((u16)GPIOx->IDR);
000002  6888              LDR      r0,[r1,#8]
000004  b280              UXTH     r0,r0
;;;275    }
000006  4770              BX       lr
;;;276    
                          ENDP


                          AREA ||i.GPIO_ReadInputDataBit||, CODE, READONLY, ALIGN=1

                  GPIO_ReadInputDataBit PROC
;;;242    *******************************************************************************/
;;;243    u8 GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, u16 GPIO_Pin)
000000  4602              MOV      r2,r0
;;;244    {
;;;245      u8 bitstatus = 0x00;
000002  2000              MOVS     r0,#0
;;;246      
;;;247      /* Check the parameters */
;;;248      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;249      assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
;;;250      
;;;251      if ((GPIOx->IDR & GPIO_Pin) != (u32)Bit_RESET)
000004  6893              LDR      r3,[r2,#8]
000006  420b              TST      r3,r1
000008  d001              BEQ      |L10.14|
;;;252      {
;;;253        bitstatus = (u8)Bit_SET;
00000a  2001              MOVS     r0,#1
00000c  e000              B        |L10.16|
                  |L10.14|
;;;254      }
;;;255      else
;;;256      {
;;;257        bitstatus = (u8)Bit_RESET;
00000e  2000              MOVS     r0,#0
                  |L10.16|
;;;258      }
;;;259      return bitstatus;
;;;260    }
000010  4770              BX       lr
;;;261    
                          ENDP


                          AREA ||i.GPIO_ReadOutputData||, CODE, READONLY, ALIGN=1

                  GPIO_ReadOutputData PROC
;;;311    *******************************************************************************/
;;;312    u16 GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
000000  4601              MOV      r1,r0
;;;313    {
;;;314      /* Check the parameters */
;;;315      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;316        
;;;317      return ((u16)GPIOx->ODR);
000002  68c8              LDR      r0,[r1,#0xc]
000004  b280              UXTH     r0,r0
;;;318    }
000006  4770              BX       lr
;;;319    
                          ENDP


                          AREA ||i.GPIO_ReadOutputDataBit||, CODE, READONLY, ALIGN=1

                  GPIO_ReadOutputDataBit PROC
;;;285    *******************************************************************************/
;;;286    u8 GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, u16 GPIO_Pin)
000000  4602              MOV      r2,r0
;;;287    {
;;;288      u8 bitstatus = 0x00;
000002  2000              MOVS     r0,#0
;;;289    
;;;290      /* Check the parameters */
;;;291      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;292      assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
;;;293      
;;;294      if ((GPIOx->ODR & GPIO_Pin) != (u32)Bit_RESET)
000004  68d3              LDR      r3,[r2,#0xc]
000006  420b              TST      r3,r1
000008  d001              BEQ      |L12.14|
;;;295      {
;;;296        bitstatus = (u8)Bit_SET;
00000a  2001              MOVS     r0,#1
00000c  e000              B        |L12.16|
                  |L12.14|
;;;297      }
;;;298      else
;;;299      {
;;;300        bitstatus = (u8)Bit_RESET;
00000e  2000              MOVS     r0,#0
                  |L12.16|
;;;301      }
;;;302      return bitstatus;
;;;303    }
000010  4770              BX       lr
;;;304    
                          ENDP


                          AREA ||i.GPIO_ResetBits||, CODE, READONLY, ALIGN=1

                  GPIO_ResetBits PROC
;;;348    *******************************************************************************/
;;;349    void GPIO_ResetBits(GPIO_TypeDef* GPIOx, u16 GPIO_Pin)
000000  6141              STR      r1,[r0,#0x14]
;;;350    {
;;;351      /* Check the parameters */
;;;352      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;353      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;354      
;;;355      GPIOx->BRR = GPIO_Pin;
;;;356    }
000002  4770              BX       lr
;;;357    
                          ENDP


                          AREA ||i.GPIO_SetBits||, CODE, READONLY, ALIGN=1

                  GPIO_SetBits PROC
;;;329    *******************************************************************************/
;;;330    void GPIO_SetBits(GPIO_TypeDef* GPIOx, u16 GPIO_Pin)
000000  6101              STR      r1,[r0,#0x10]
;;;331    {
;;;332      /* Check the parameters */
;;;333      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;334      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;335      
;;;336      GPIOx->BSRR = GPIO_Pin;
;;;337    }
000002  4770              BX       lr
;;;338    
                          ENDP


                          AREA ||i.GPIO_StructInit||, CODE, READONLY, ALIGN=1

                  GPIO_StructInit PROC
;;;225    *******************************************************************************/
;;;226    void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
000000  f64f71ff          MOV      r1,#0xffff
;;;227    {
;;;228      /* Reset GPIO init structure parameters values */
;;;229      GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
000004  8001              STRH     r1,[r0,#0]
;;;230      GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
000006  2102              MOVS     r1,#2
000008  7081              STRB     r1,[r0,#2]
;;;231      GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
00000a  2104              MOVS     r1,#4
00000c  70c1              STRB     r1,[r0,#3]
;;;232    }
00000e  4770              BX       lr
;;;233    
                          ENDP


                          AREA ||i.GPIO_Write||, CODE, READONLY, ALIGN=1

                  GPIO_Write PROC
;;;396    *******************************************************************************/
;;;397    void GPIO_Write(GPIO_TypeDef* GPIOx, u16 PortVal)
000000  60c1              STR      r1,[r0,#0xc]
;;;398    {
;;;399      /* Check the parameters */
;;;400      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;401      
;;;402      GPIOx->ODR = PortVal;
;;;403    }
000002  4770              BX       lr
;;;404    
                          ENDP


                          AREA ||i.GPIO_WriteBit||, CODE, READONLY, ALIGN=1

                  GPIO_WriteBit PROC
;;;370    *******************************************************************************/
;;;371    void GPIO_WriteBit(GPIO_TypeDef* GPIOx, u16 GPIO_Pin, BitAction BitVal)
000000  b10a              CBZ      r2,|L17.6|
;;;372    {
;;;373      /* Check the parameters */
;;;374      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;375      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;376      assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
;;;377      
;;;378      if (BitVal != Bit_RESET)
;;;379      {
;;;380        GPIOx->BSRR = GPIO_Pin;
000002  6101              STR      r1,[r0,#0x10]
000004  e000              B        |L17.8|
                  |L17.6|
;;;381      }
;;;382      else
;;;383      {
;;;384        GPIOx->BRR = GPIO_Pin;
000006  6141              STR      r1,[r0,#0x14]
                  |L17.8|
;;;385      }
;;;386    }
000008  4770              BX       lr
;;;387    
                          ENDP

