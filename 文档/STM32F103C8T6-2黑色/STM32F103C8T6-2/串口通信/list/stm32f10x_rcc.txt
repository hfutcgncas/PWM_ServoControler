; generated by ARM C/C++ Compiler, 4.1 [Build 567]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\stm32f10x_rcc.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\stm32f10x_rcc.d --cpu=Cortex-M3 --apcs=interwork -O0 -I.\source\wlib\ÏµÍ³Ê±ÖÓÅäÖÃ -I.\source\wlib\delay -I..\uvsion -I"D:\Program Files\keil4.14\ARM\INC" -I"D:\Program Files\keil4.14\ARM\INC\ST\STM32F10x" -D__MICROLIB --omf_browse=.\obj\stm32f10x_rcc.crf source\FWLib\src\stm32f10x_rcc.c]
                          THUMB

                          AREA ||i.RCC_ADCCLKConfig||, CODE, READONLY, ALIGN=2

                  RCC_ADCCLKConfig PROC
;;;539    *******************************************************************************/
;;;540    void RCC_ADCCLKConfig(u32 RCC_PCLK2)
000000  4601              MOV      r1,r0
;;;541    {
;;;542      u32 tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;543    
;;;544      /* Check the parameters */
;;;545      assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
;;;546    
;;;547      tmpreg = RCC->CFGR;
000004  4a03              LDR      r2,|L1.20|
000006  6850              LDR      r0,[r2,#4]
;;;548    
;;;549      /* Clear ADCPRE[1:0] bits */
;;;550      tmpreg &= CFGR_ADCPRE_Reset_Mask;
000008  f4204040          BIC      r0,r0,#0xc000
;;;551    
;;;552      /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
;;;553      tmpreg |= RCC_PCLK2;
00000c  4308              ORRS     r0,r0,r1
;;;554    
;;;555      /* Store the new value */
;;;556      RCC->CFGR = tmpreg;
00000e  6050              STR      r0,[r2,#4]
;;;557    }
000010  4770              BX       lr
;;;558    
                          ENDP

000012  0000              DCW      0x0000
                  |L1.20|
                          DCD      0x40021000

                          AREA ||i.RCC_AHBPeriphClockCmd||, CODE, READONLY, ALIGN=2

                  RCC_AHBPeriphClockCmd PROC
;;;766    *******************************************************************************/
;;;767    void RCC_AHBPeriphClockCmd(u32 RCC_AHBPeriph, FunctionalState NewState)
000000  b129              CBZ      r1,|L2.14|
;;;768    {
;;;769      /* Check the parameters */
;;;770      assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
;;;771      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;772    
;;;773      if (NewState != DISABLE)
;;;774      {
;;;775        RCC->AHBENR |= RCC_AHBPeriph;
000002  4a06              LDR      r2,|L2.28|
000004  6952              LDR      r2,[r2,#0x14]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L2.28|
00000a  615a              STR      r2,[r3,#0x14]
00000c  e004              B        |L2.24|
                  |L2.14|
;;;776      }
;;;777      else
;;;778      {
;;;779        RCC->AHBENR &= ~RCC_AHBPeriph;
00000e  4a03              LDR      r2,|L2.28|
000010  6952              LDR      r2,[r2,#0x14]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L2.28|
000016  615a              STR      r2,[r3,#0x14]
                  |L2.24|
;;;780      }
;;;781    }
000018  4770              BX       lr
;;;782    
                          ENDP

00001a  0000              DCW      0x0000
                  |L2.28|
                          DCD      0x40021000

                          AREA ||i.RCC_APB1PeriphClockCmd||, CODE, READONLY, ALIGN=2

                  RCC_APB1PeriphClockCmd PROC
;;;833    *******************************************************************************/
;;;834    void RCC_APB1PeriphClockCmd(u32 RCC_APB1Periph, FunctionalState NewState)
000000  b129              CBZ      r1,|L3.14|
;;;835    {
;;;836      /* Check the parameters */
;;;837      assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
;;;838      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;839    
;;;840      if (NewState != DISABLE)
;;;841      {
;;;842        RCC->APB1ENR |= RCC_APB1Periph;
000002  4a06              LDR      r2,|L3.28|
000004  69d2              LDR      r2,[r2,#0x1c]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L3.28|
00000a  61da              STR      r2,[r3,#0x1c]
00000c  e004              B        |L3.24|
                  |L3.14|
;;;843      }
;;;844      else
;;;845      {
;;;846        RCC->APB1ENR &= ~RCC_APB1Periph;
00000e  4a03              LDR      r2,|L3.28|
000010  69d2              LDR      r2,[r2,#0x1c]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L3.28|
000016  61da              STR      r2,[r3,#0x1c]
                  |L3.24|
;;;847      }
;;;848    }
000018  4770              BX       lr
;;;849    
                          ENDP

00001a  0000              DCW      0x0000
                  |L3.28|
                          DCD      0x40021000

                          AREA ||i.RCC_APB1PeriphResetCmd||, CODE, READONLY, ALIGN=2

                  RCC_APB1PeriphResetCmd PROC
;;;898    *******************************************************************************/
;;;899    void RCC_APB1PeriphResetCmd(u32 RCC_APB1Periph, FunctionalState NewState)
000000  b129              CBZ      r1,|L4.14|
;;;900    {
;;;901      /* Check the parameters */
;;;902      assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
;;;903      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;904    
;;;905      if (NewState != DISABLE)
;;;906      {
;;;907        RCC->APB1RSTR |= RCC_APB1Periph;
000002  4a06              LDR      r2,|L4.28|
000004  6912              LDR      r2,[r2,#0x10]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L4.28|
00000a  611a              STR      r2,[r3,#0x10]
00000c  e004              B        |L4.24|
                  |L4.14|
;;;908      }
;;;909      else
;;;910      {
;;;911        RCC->APB1RSTR &= ~RCC_APB1Periph;
00000e  4a03              LDR      r2,|L4.28|
000010  6912              LDR      r2,[r2,#0x10]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L4.28|
000016  611a              STR      r2,[r3,#0x10]
                  |L4.24|
;;;912      }
;;;913    }
000018  4770              BX       lr
;;;914    
                          ENDP

00001a  0000              DCW      0x0000
                  |L4.28|
                          DCD      0x40021000

                          AREA ||i.RCC_APB2PeriphClockCmd||, CODE, READONLY, ALIGN=2

                  RCC_APB2PeriphClockCmd PROC
;;;799    *******************************************************************************/
;;;800    void RCC_APB2PeriphClockCmd(u32 RCC_APB2Periph, FunctionalState NewState)
000000  b129              CBZ      r1,|L5.14|
;;;801    {
;;;802      /* Check the parameters */
;;;803      assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
;;;804      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;805    
;;;806      if (NewState != DISABLE)
;;;807      {
;;;808        RCC->APB2ENR |= RCC_APB2Periph;
000002  4a06              LDR      r2,|L5.28|
000004  6992              LDR      r2,[r2,#0x18]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L5.28|
00000a  619a              STR      r2,[r3,#0x18]
00000c  e004              B        |L5.24|
                  |L5.14|
;;;809      }
;;;810      else
;;;811      {
;;;812        RCC->APB2ENR &= ~RCC_APB2Periph;
00000e  4a03              LDR      r2,|L5.28|
000010  6992              LDR      r2,[r2,#0x18]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L5.28|
000016  619a              STR      r2,[r3,#0x18]
                  |L5.24|
;;;813      }
;;;814    }
000018  4770              BX       lr
;;;815    
                          ENDP

00001a  0000              DCW      0x0000
                  |L5.28|
                          DCD      0x40021000

                          AREA ||i.RCC_APB2PeriphResetCmd||, CODE, READONLY, ALIGN=2

                  RCC_APB2PeriphResetCmd PROC
;;;865    *******************************************************************************/
;;;866    void RCC_APB2PeriphResetCmd(u32 RCC_APB2Periph, FunctionalState NewState)
000000  b129              CBZ      r1,|L6.14|
;;;867    {
;;;868      /* Check the parameters */
;;;869      assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
;;;870      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;871    
;;;872      if (NewState != DISABLE)
;;;873      {
;;;874        RCC->APB2RSTR |= RCC_APB2Periph;
000002  4a06              LDR      r2,|L6.28|
000004  68d2              LDR      r2,[r2,#0xc]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L6.28|
00000a  60da              STR      r2,[r3,#0xc]
00000c  e004              B        |L6.24|
                  |L6.14|
;;;875      }
;;;876      else
;;;877      {
;;;878        RCC->APB2RSTR &= ~RCC_APB2Periph;
00000e  4a03              LDR      r2,|L6.28|
000010  68d2              LDR      r2,[r2,#0xc]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L6.28|
000016  60da              STR      r2,[r3,#0xc]
                  |L6.24|
;;;879      }
;;;880    }
000018  4770              BX       lr
;;;881    
                          ENDP

00001a  0000              DCW      0x0000
                  |L6.28|
                          DCD      0x40021000

                          AREA ||i.RCC_AdjustHSICalibrationValue||, CODE, READONLY, ALIGN=2

                  RCC_AdjustHSICalibrationValue PROC
;;;231    *******************************************************************************/
;;;232    void RCC_AdjustHSICalibrationValue(u8 HSICalibrationValue)
000000  4601              MOV      r1,r0
;;;233    {
;;;234      u32 tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;235    
;;;236      /* Check the parameters */
;;;237      assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
;;;238    
;;;239      tmpreg = RCC->CR;
000004  4a03              LDR      r2,|L7.20|
000006  6810              LDR      r0,[r2,#0]
;;;240    
;;;241      /* Clear HSITRIM[4:0] bits */
;;;242      tmpreg &= CR_HSITRIM_Mask;
000008  f02000f8          BIC      r0,r0,#0xf8
;;;243    
;;;244      /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
;;;245      tmpreg |= (u32)HSICalibrationValue << 3;
00000c  ea4000c1          ORR      r0,r0,r1,LSL #3
;;;246    
;;;247      /* Store the new value */
;;;248      RCC->CR = tmpreg;
000010  6010              STR      r0,[r2,#0]
;;;249    }
000012  4770              BX       lr
;;;250    
                          ENDP

                  |L7.20|
                          DCD      0x40021000

                          AREA ||i.RCC_BackupResetCmd||, CODE, READONLY, ALIGN=2

                  RCC_BackupResetCmd PROC
;;;922    *******************************************************************************/
;;;923    void RCC_BackupResetCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L8.8|
;;;924    {
;;;925      /* Check the parameters */
;;;926      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;927    
;;;928      *(vu32 *) BDCR_BDRST_BB = (u32)NewState;
000002  6008              STR      r0,[r1,#0]
;;;929    }
000004  4770              BX       lr
;;;930    
                          ENDP

000006  0000              DCW      0x0000
                  |L8.8|
                          DCD      0x42420440

                          AREA ||i.RCC_ClearFlag||, CODE, READONLY, ALIGN=2

                  RCC_ClearFlag PROC
;;;1038   *******************************************************************************/
;;;1039   void RCC_ClearFlag(void)
000000  4803              LDR      r0,|L9.16|
;;;1040   {
;;;1041     /* Set RMVF bit to clear the reset flags */
;;;1042     RCC->CSR |= CSR_RMVF_Set;
000002  6a40              LDR      r0,[r0,#0x24]
000004  f0407080          ORR      r0,r0,#0x1000000
000008  4901              LDR      r1,|L9.16|
00000a  6248              STR      r0,[r1,#0x24]
;;;1043   }
00000c  4770              BX       lr
;;;1044   
                          ENDP

00000e  0000              DCW      0x0000
                  |L9.16|
                          DCD      0x40021000

                          AREA ||i.RCC_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  RCC_ClearITPendingBit PROC
;;;1093   *******************************************************************************/
;;;1094   void RCC_ClearITPendingBit(u8 RCC_IT)
000000  4901              LDR      r1,|L10.8|
;;;1095   {
;;;1096     /* Check the parameters */
;;;1097     assert_param(IS_RCC_CLEAR_IT(RCC_IT));
;;;1098   
;;;1099     /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
;;;1100        pending bits */
;;;1101     *(vu8 *) CIR_BYTE3_ADDRESS = RCC_IT;
000002  7288              STRB     r0,[r1,#0xa]
;;;1102   }
000004  4770              BX       lr
;;;1103   
                          ENDP

000006  0000              DCW      0x0000
                  |L10.8|
                          DCD      0x40021000

                          AREA ||i.RCC_ClockSecuritySystemCmd||, CODE, READONLY, ALIGN=2

                  RCC_ClockSecuritySystemCmd PROC
;;;938    *******************************************************************************/
;;;939    void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L11.8|
;;;940    {
;;;941      /* Check the parameters */
;;;942      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;943    
;;;944      *(vu32 *) CR_CSSON_BB = (u32)NewState;
000002  64c8              STR      r0,[r1,#0x4c]
;;;945    }
000004  4770              BX       lr
;;;946    
                          ENDP

000006  0000              DCW      0x0000
                  |L11.8|
                          DCD      0x42420000

                          AREA ||i.RCC_DeInit||, CODE, READONLY, ALIGN=2

                  RCC_DeInit PROC
;;;124    *******************************************************************************/
;;;125    void RCC_DeInit(void)
000000  480f              LDR      r0,|L12.64|
;;;126    {
;;;127      /* Set HSION bit */
;;;128      RCC->CR |= (u32)0x00000001;
000002  6800              LDR      r0,[r0,#0]
000004  f0400001          ORR      r0,r0,#1
000008  490d              LDR      r1,|L12.64|
00000a  6008              STR      r0,[r1,#0]
;;;129    
;;;130      /* Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], ADCPRE[1:0] and MCO[2:0] bits */
;;;131      RCC->CFGR &= (u32)0xF8FF0000;
00000c  4608              MOV      r0,r1
00000e  6840              LDR      r0,[r0,#4]
000010  490c              LDR      r1,|L12.68|
000012  4008              ANDS     r0,r0,r1
000014  490a              LDR      r1,|L12.64|
000016  6048              STR      r0,[r1,#4]
;;;132      
;;;133      /* Reset HSEON, CSSON and PLLON bits */
;;;134      RCC->CR &= (u32)0xFEF6FFFF;
000018  4608              MOV      r0,r1
00001a  6800              LDR      r0,[r0,#0]
00001c  490a              LDR      r1,|L12.72|
00001e  4008              ANDS     r0,r0,r1
000020  4907              LDR      r1,|L12.64|
000022  6008              STR      r0,[r1,#0]
;;;135    
;;;136      /* Reset HSEBYP bit */
;;;137      RCC->CR &= (u32)0xFFFBFFFF;
000024  4608              MOV      r0,r1
000026  6800              LDR      r0,[r0,#0]
000028  f4202080          BIC      r0,r0,#0x40000
00002c  6008              STR      r0,[r1,#0]
;;;138    
;;;139      /* Reset PLLSRC, PLLXTPRE, PLLMUL[3:0] and USBPRE bits */
;;;140      RCC->CFGR &= (u32)0xFF80FFFF;
00002e  4608              MOV      r0,r1
000030  6840              LDR      r0,[r0,#4]
000032  f42000fe          BIC      r0,r0,#0x7f0000
000036  6048              STR      r0,[r1,#4]
;;;141    
;;;142      /* Disable all interrupts */
;;;143      RCC->CIR = 0x00000000;
000038  2000              MOVS     r0,#0
00003a  6088              STR      r0,[r1,#8]
;;;144    }
00003c  4770              BX       lr
;;;145    
                          ENDP

00003e  0000              DCW      0x0000
                  |L12.64|
                          DCD      0x40021000
                  |L12.68|
                          DCD      0xf8ff0000
                  |L12.72|
                          DCD      0xfef6ffff

                          AREA ||i.RCC_GetClocksFreq||, CODE, READONLY, ALIGN=2

                  RCC_GetClocksFreq PROC
;;;666    *******************************************************************************/
;;;667    void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
000000  b530              PUSH     {r4,r5,lr}
;;;668    {
;;;669      u32 tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
000002  2100              MOVS     r1,#0
000004  2200              MOVS     r2,#0
000006  2400              MOVS     r4,#0
000008  2300              MOVS     r3,#0
;;;670    
;;;671      /* Get SYSCLK source -------------------------------------------------------*/
;;;672      tmp = RCC->CFGR & CFGR_SWS_Mask;
00000a  4d2d              LDR      r5,|L13.192|
00000c  686d              LDR      r5,[r5,#4]
00000e  f005010c          AND      r1,r5,#0xc
;;;673    
;;;674      switch (tmp)
000012  b121              CBZ      r1,|L13.30|
000014  2904              CMP      r1,#4
000016  d005              BEQ      |L13.36|
000018  2908              CMP      r1,#8
00001a  d123              BNE      |L13.100|
00001c  e005              B        |L13.42|
                  |L13.30|
;;;675      {
;;;676        case 0x00:  /* HSI used as system clock */
;;;677          RCC_Clocks->SYSCLK_Frequency = HSI_Value;
00001e  4d29              LDR      r5,|L13.196|
000020  6005              STR      r5,[r0,#0]
;;;678          break;
000022  e022              B        |L13.106|
                  |L13.36|
;;;679    
;;;680        case 0x04:  /* HSE used as system clock */
;;;681          RCC_Clocks->SYSCLK_Frequency = HSE_Value;
000024  4d27              LDR      r5,|L13.196|
000026  6005              STR      r5,[r0,#0]
;;;682          break;
000028  e01f              B        |L13.106|
                  |L13.42|
;;;683    
;;;684        case 0x08:  /* PLL used as system clock */
;;;685          /* Get PLL clock source and multiplication factor ----------------------*/
;;;686          pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
00002a  4d25              LDR      r5,|L13.192|
00002c  686d              LDR      r5,[r5,#4]
00002e  f4051270          AND      r2,r5,#0x3c0000
;;;687          pllmull = ( pllmull >> 18) + 2;
000032  2502              MOVS     r5,#2
000034  eb054292          ADD      r2,r5,r2,LSR #18
;;;688    
;;;689          pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
000038  4d21              LDR      r5,|L13.192|
00003a  686d              LDR      r5,[r5,#4]
00003c  f4053480          AND      r4,r5,#0x10000
;;;690    
;;;691          if (pllsource == 0x00)
000040  b91c              CBNZ     r4,|L13.74|
;;;692          {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
;;;693            RCC_Clocks->SYSCLK_Frequency = (HSI_Value >> 1) * pllmull;
000042  4d21              LDR      r5,|L13.200|
000044  4355              MULS     r5,r2,r5
000046  6005              STR      r5,[r0,#0]
000048  e00b              B        |L13.98|
                  |L13.74|
;;;694          }
;;;695          else
;;;696          {/* HSE selected as PLL clock entry */
;;;697    
;;;698            if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (u32)RESET)
00004a  4d1d              LDR      r5,|L13.192|
00004c  686d              LDR      r5,[r5,#4]
00004e  f4153f00          TST      r5,#0x20000
000052  d003              BEQ      |L13.92|
;;;699            {/* HSE oscillator clock divided by 2 */
;;;700    
;;;701              RCC_Clocks->SYSCLK_Frequency = (HSE_Value >> 1) * pllmull;
000054  4d1c              LDR      r5,|L13.200|
000056  4355              MULS     r5,r2,r5
000058  6005              STR      r5,[r0,#0]
00005a  e002              B        |L13.98|
                  |L13.92|
;;;702            }
;;;703            else
;;;704            {
;;;705              RCC_Clocks->SYSCLK_Frequency = HSE_Value * pllmull;
00005c  4d19              LDR      r5,|L13.196|
00005e  4355              MULS     r5,r2,r5
000060  6005              STR      r5,[r0,#0]
                  |L13.98|
;;;706            }
;;;707          }
;;;708          break;
000062  e002              B        |L13.106|
                  |L13.100|
;;;709    
;;;710        default:
;;;711          RCC_Clocks->SYSCLK_Frequency = HSI_Value;
000064  4d17              LDR      r5,|L13.196|
000066  6005              STR      r5,[r0,#0]
;;;712          break;
000068  bf00              NOP      
                  |L13.106|
00006a  bf00              NOP                            ;678
;;;713      }
;;;714    
;;;715      /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
;;;716      /* Get HCLK prescaler */
;;;717      tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
00006c  4d14              LDR      r5,|L13.192|
00006e  686d              LDR      r5,[r5,#4]
000070  f00501f0          AND      r1,r5,#0xf0
;;;718      tmp = tmp >> 4;
000074  0909              LSRS     r1,r1,#4
;;;719      presc = APBAHBPrescTable[tmp];
000076  4d15              LDR      r5,|L13.204|
000078  5c6b              LDRB     r3,[r5,r1]
;;;720    
;;;721      /* HCLK clock frequency */
;;;722      RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
00007a  6805              LDR      r5,[r0,#0]
00007c  40dd              LSRS     r5,r5,r3
00007e  6045              STR      r5,[r0,#4]
;;;723    
;;;724      /* Get PCLK1 prescaler */
;;;725      tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
000080  4d0f              LDR      r5,|L13.192|
000082  686d              LDR      r5,[r5,#4]
000084  f40561e0          AND      r1,r5,#0x700
;;;726      tmp = tmp >> 8;
000088  0a09              LSRS     r1,r1,#8
;;;727      presc = APBAHBPrescTable[tmp];
00008a  4d10              LDR      r5,|L13.204|
00008c  5c6b              LDRB     r3,[r5,r1]
;;;728    
;;;729      /* PCLK1 clock frequency */
;;;730      RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
00008e  6845              LDR      r5,[r0,#4]
000090  40dd              LSRS     r5,r5,r3
000092  6085              STR      r5,[r0,#8]
;;;731    
;;;732      /* Get PCLK2 prescaler */
;;;733      tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
000094  4d0a              LDR      r5,|L13.192|
000096  686d              LDR      r5,[r5,#4]
000098  f4055160          AND      r1,r5,#0x3800
;;;734      tmp = tmp >> 11;
00009c  0ac9              LSRS     r1,r1,#11
;;;735      presc = APBAHBPrescTable[tmp];
00009e  4d0b              LDR      r5,|L13.204|
0000a0  5c6b              LDRB     r3,[r5,r1]
;;;736    
;;;737      /* PCLK2 clock frequency */
;;;738      RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
0000a2  6845              LDR      r5,[r0,#4]
0000a4  40dd              LSRS     r5,r5,r3
0000a6  60c5              STR      r5,[r0,#0xc]
;;;739    
;;;740      /* Get ADCCLK prescaler */
;;;741      tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
0000a8  4d05              LDR      r5,|L13.192|
0000aa  686d              LDR      r5,[r5,#4]
0000ac  f4054140          AND      r1,r5,#0xc000
;;;742      tmp = tmp >> 14;
0000b0  0b89              LSRS     r1,r1,#14
;;;743      presc = ADCPrescTable[tmp];
0000b2  4d07              LDR      r5,|L13.208|
0000b4  5c6b              LDRB     r3,[r5,r1]
;;;744    
;;;745      /* ADCCLK clock frequency */
;;;746      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
0000b6  68c5              LDR      r5,[r0,#0xc]
0000b8  fbb5f5f3          UDIV     r5,r5,r3
0000bc  6105              STR      r5,[r0,#0x10]
;;;747    }
0000be  bd30              POP      {r4,r5,pc}
;;;748    
                          ENDP

                  |L13.192|
                          DCD      0x40021000
                  |L13.196|
                          DCD      0x007a1200
                  |L13.200|
                          DCD      0x003d0900
                  |L13.204|
                          DCD      APBAHBPrescTable
                  |L13.208|
                          DCD      ADCPrescTable

                          AREA ||i.RCC_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  RCC_GetFlagStatus PROC
;;;987    *******************************************************************************/
;;;988    FlagStatus RCC_GetFlagStatus(u8 RCC_FLAG)
000000  b510              PUSH     {r4,lr}
;;;989    {
000002  4601              MOV      r1,r0
;;;990      u32 tmp = 0;
000004  2200              MOVS     r2,#0
;;;991      u32 statusreg = 0;
000006  2300              MOVS     r3,#0
;;;992      FlagStatus bitstatus = RESET;
000008  2000              MOVS     r0,#0
;;;993    
;;;994      /* Check the parameters */
;;;995      assert_param(IS_RCC_FLAG(RCC_FLAG));
;;;996    
;;;997      /* Get the RCC register index */
;;;998      tmp = RCC_FLAG >> 5;
00000a  114a              ASRS     r2,r1,#5
;;;999    
;;;1000     if (tmp == 1)               /* The flag to check is in CR register */
00000c  2a01              CMP      r2,#1
00000e  d102              BNE      |L14.22|
;;;1001     {
;;;1002       statusreg = RCC->CR;
000010  4c09              LDR      r4,|L14.56|
000012  6823              LDR      r3,[r4,#0]
000014  e006              B        |L14.36|
                  |L14.22|
;;;1003     }
;;;1004     else if (tmp == 2)          /* The flag to check is in BDCR register */
000016  2a02              CMP      r2,#2
000018  d102              BNE      |L14.32|
;;;1005     {
;;;1006       statusreg = RCC->BDCR;
00001a  4c07              LDR      r4,|L14.56|
00001c  6a23              LDR      r3,[r4,#0x20]
00001e  e001              B        |L14.36|
                  |L14.32|
;;;1007     }
;;;1008     else                       /* The flag to check is in CSR register */
;;;1009     {
;;;1010       statusreg = RCC->CSR;
000020  4c05              LDR      r4,|L14.56|
000022  6a63              LDR      r3,[r4,#0x24]
                  |L14.36|
;;;1011     }
;;;1012   
;;;1013     /* Get the flag position */
;;;1014     tmp = RCC_FLAG & FLAG_Mask;
000024  f001021f          AND      r2,r1,#0x1f
;;;1015   
;;;1016     if ((statusreg & ((u32)1 << tmp)) != (u32)RESET)
000028  2401              MOVS     r4,#1
00002a  4094              LSLS     r4,r4,r2
00002c  421c              TST      r4,r3
00002e  d001              BEQ      |L14.52|
;;;1017     {
;;;1018       bitstatus = SET;
000030  2001              MOVS     r0,#1
000032  e000              B        |L14.54|
                  |L14.52|
;;;1019     }
;;;1020     else
;;;1021     {
;;;1022       bitstatus = RESET;
000034  2000              MOVS     r0,#0
                  |L14.54|
;;;1023     }
;;;1024   
;;;1025     /* Return the flag status */
;;;1026     return bitstatus;
;;;1027   }
000036  bd10              POP      {r4,pc}
;;;1028   
                          ENDP

                  |L14.56|
                          DCD      0x40021000

                          AREA ||i.RCC_GetITStatus||, CODE, READONLY, ALIGN=2

                  RCC_GetITStatus PROC
;;;1058   *******************************************************************************/
;;;1059   ITStatus RCC_GetITStatus(u8 RCC_IT)
000000  4601              MOV      r1,r0
;;;1060   {
;;;1061     ITStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;1062   
;;;1063     /* Check the parameters */
;;;1064     assert_param(IS_RCC_GET_IT(RCC_IT));
;;;1065   
;;;1066     /* Check the status of the specified RCC interrupt */
;;;1067     if ((RCC->CIR & RCC_IT) != (u32)RESET)
000004  4a03              LDR      r2,|L15.20|
000006  6892              LDR      r2,[r2,#8]
000008  420a              TST      r2,r1
00000a  d001              BEQ      |L15.16|
;;;1068     {
;;;1069       bitstatus = SET;
00000c  2001              MOVS     r0,#1
00000e  e000              B        |L15.18|
                  |L15.16|
;;;1070     }
;;;1071     else
;;;1072     {
;;;1073       bitstatus = RESET;
000010  2000              MOVS     r0,#0
                  |L15.18|
;;;1074     }
;;;1075   
;;;1076     /* Return the RCC_IT status */
;;;1077     return  bitstatus;
;;;1078   }
000012  4770              BX       lr
;;;1079   
                          ENDP

                  |L15.20|
                          DCD      0x40021000

                          AREA ||i.RCC_GetSYSCLKSource||, CODE, READONLY, ALIGN=2

                  RCC_GetSYSCLKSource PROC
;;;363    *******************************************************************************/
;;;364    u8 RCC_GetSYSCLKSource(void)
000000  4802              LDR      r0,|L16.12|
;;;365    {
;;;366      return ((u8)(RCC->CFGR & CFGR_SWS_Mask));
000002  6840              LDR      r0,[r0,#4]
000004  f000000c          AND      r0,r0,#0xc
;;;367    }
000008  4770              BX       lr
;;;368    
                          ENDP

00000a  0000              DCW      0x0000
                  |L16.12|
                          DCD      0x40021000

                          AREA ||i.RCC_HCLKConfig||, CODE, READONLY, ALIGN=2

                  RCC_HCLKConfig PROC
;;;386    *******************************************************************************/
;;;387    void RCC_HCLKConfig(u32 RCC_SYSCLK)
000000  4601              MOV      r1,r0
;;;388    {
;;;389      u32 tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;390    
;;;391      /* Check the parameters */
;;;392      assert_param(IS_RCC_HCLK(RCC_SYSCLK));
;;;393    
;;;394      tmpreg = RCC->CFGR;
000004  4a03              LDR      r2,|L17.20|
000006  6850              LDR      r0,[r2,#4]
;;;395    
;;;396      /* Clear HPRE[3:0] bits */
;;;397      tmpreg &= CFGR_HPRE_Reset_Mask;
000008  f02000f0          BIC      r0,r0,#0xf0
;;;398    
;;;399      /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
;;;400      tmpreg |= RCC_SYSCLK;
00000c  4308              ORRS     r0,r0,r1
;;;401    
;;;402      /* Store the new value */
;;;403      RCC->CFGR = tmpreg;
00000e  6050              STR      r0,[r2,#4]
;;;404    }
000010  4770              BX       lr
;;;405    
                          ENDP

000012  0000              DCW      0x0000
                  |L17.20|
                          DCD      0x40021000

                          AREA ||i.RCC_HSEConfig||, CODE, READONLY, ALIGN=2

                  RCC_HSEConfig PROC
;;;159    *******************************************************************************/
;;;160    void RCC_HSEConfig(u32 RCC_HSE)
000000  4911              LDR      r1,|L18.72|
;;;161    {
;;;162      /* Check the parameters */
;;;163      assert_param(IS_RCC_HSE(RCC_HSE));
;;;164    
;;;165      /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
;;;166      /* Reset HSEON bit */
;;;167      RCC->CR &= CR_HSEON_Reset;
000002  6809              LDR      r1,[r1,#0]
000004  f4213180          BIC      r1,r1,#0x10000
000008  4a0f              LDR      r2,|L18.72|
00000a  6011              STR      r1,[r2,#0]
;;;168    
;;;169      /* Reset HSEBYP bit */
;;;170      RCC->CR &= CR_HSEBYP_Reset;
00000c  4611              MOV      r1,r2
00000e  6809              LDR      r1,[r1,#0]
000010  f4212180          BIC      r1,r1,#0x40000
000014  6011              STR      r1,[r2,#0]
;;;171    
;;;172      /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
;;;173      switch(RCC_HSE)
000016  f5b03f80          CMP      r0,#0x10000
00001a  d003              BEQ      |L18.36|
00001c  f5b02f80          CMP      r0,#0x40000
000020  d10e              BNE      |L18.64|
000022  e006              B        |L18.50|
                  |L18.36|
;;;174      {
;;;175        case RCC_HSE_ON:
;;;176          /* Set HSEON bit */
;;;177          RCC->CR |= CR_HSEON_Set;
000024  4908              LDR      r1,|L18.72|
000026  6809              LDR      r1,[r1,#0]
000028  f4413180          ORR      r1,r1,#0x10000
00002c  4a06              LDR      r2,|L18.72|
00002e  6011              STR      r1,[r2,#0]
;;;178          break;
000030  e007              B        |L18.66|
                  |L18.50|
;;;179          
;;;180        case RCC_HSE_Bypass:
;;;181          /* Set HSEBYP and HSEON bits */
;;;182          RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
000032  4905              LDR      r1,|L18.72|
000034  6809              LDR      r1,[r1,#0]
000036  f44121a0          ORR      r1,r1,#0x50000
00003a  4a03              LDR      r2,|L18.72|
00003c  6011              STR      r1,[r2,#0]
;;;183          break;            
00003e  e000              B        |L18.66|
                  |L18.64|
;;;184          
;;;185        default:
;;;186          break;      
000040  bf00              NOP      
                  |L18.66|
000042  bf00              NOP                            ;178
;;;187      }
;;;188    }
000044  4770              BX       lr
;;;189    
                          ENDP

000046  0000              DCW      0x0000
                  |L18.72|
                          DCD      0x40021000

                          AREA ||i.RCC_HSICmd||, CODE, READONLY, ALIGN=2

                  RCC_HSICmd PROC
;;;260    *******************************************************************************/
;;;261    void RCC_HSICmd(FunctionalState NewState)
000000  4901              LDR      r1,|L19.8|
;;;262    {
;;;263      /* Check the parameters */
;;;264      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;265    
;;;266      *(vu32 *) CR_HSION_BB = (u32)NewState;
000002  6008              STR      r0,[r1,#0]
;;;267    }
000004  4770              BX       lr
;;;268    
                          ENDP

000006  0000              DCW      0x0000
                  |L19.8|
                          DCD      0x42420000

                          AREA ||i.RCC_ITConfig||, CODE, READONLY, ALIGN=2

                  RCC_ITConfig PROC
;;;487    *******************************************************************************/
;;;488    void RCC_ITConfig(u8 RCC_IT, FunctionalState NewState)
000000  b129              CBZ      r1,|L20.14|
;;;489    {
;;;490      /* Check the parameters */
;;;491      assert_param(IS_RCC_IT(RCC_IT));
;;;492      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;493    
;;;494      if (NewState != DISABLE)
;;;495      {
;;;496        /* Perform Byte access to RCC_CIR[12:8] bits to enable the selected interrupts */
;;;497        *(vu8 *) CIR_BYTE2_ADDRESS |= RCC_IT;
000002  4a07              LDR      r2,|L20.32|
000004  7a52              LDRB     r2,[r2,#9]
000006  4302              ORRS     r2,r2,r0
000008  4b05              LDR      r3,|L20.32|
00000a  725a              STRB     r2,[r3,#9]
00000c  e006              B        |L20.28|
                  |L20.14|
;;;498      }
;;;499      else
;;;500      {
;;;501        /* Perform Byte access to RCC_CIR[12:8] bits to disable the selected interrupts */
;;;502        *(vu8 *) CIR_BYTE2_ADDRESS &= (u8)~RCC_IT;
00000e  4a04              LDR      r2,|L20.32|
000010  7a52              LDRB     r2,[r2,#9]
000012  43c3              MVNS     r3,r0
000014  b2db              UXTB     r3,r3
000016  401a              ANDS     r2,r2,r3
000018  4b01              LDR      r3,|L20.32|
00001a  725a              STRB     r2,[r3,#9]
                  |L20.28|
;;;503      }
;;;504    }
00001c  4770              BX       lr
;;;505    
                          ENDP

00001e  0000              DCW      0x0000
                  |L20.32|
                          DCD      0x40021000

                          AREA ||i.RCC_LSEConfig||, CODE, READONLY, ALIGN=2

                  RCC_LSEConfig PROC
;;;570    *******************************************************************************/
;;;571    void RCC_LSEConfig(u8 RCC_LSE)
000000  2100              MOVS     r1,#0
;;;572    {
;;;573      /* Check the parameters */
;;;574      assert_param(IS_RCC_LSE(RCC_LSE));
;;;575    
;;;576      /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
;;;577      /* Reset LSEON bit */
;;;578      *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;
000002  4a0a              LDR      r2,|L21.44|
000004  7011              STRB     r1,[r2,#0]
;;;579    
;;;580      /* Reset LSEBYP bit */
;;;581      *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;
000006  4a0a              LDR      r2,|L21.48|
000008  f8821020          STRB     r1,[r2,#0x20]
;;;582    
;;;583      /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
;;;584      switch(RCC_LSE)
00000c  2801              CMP      r0,#1
00000e  d002              BEQ      |L21.22|
000010  2804              CMP      r0,#4
000012  d108              BNE      |L21.38|
000014  e003              B        |L21.30|
                  |L21.22|
;;;585      {
;;;586        case RCC_LSE_ON:
;;;587          /* Set LSEON bit */
;;;588          *(vu8 *) BDCR_ADDRESS = RCC_LSE_ON;
000016  2101              MOVS     r1,#1
000018  4a04              LDR      r2,|L21.44|
00001a  7011              STRB     r1,[r2,#0]
;;;589          break;
00001c  e004              B        |L21.40|
                  |L21.30|
;;;590          
;;;591        case RCC_LSE_Bypass:
;;;592          /* Set LSEBYP and LSEON bits */
;;;593          *(vu8 *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
00001e  2105              MOVS     r1,#5
000020  4a02              LDR      r2,|L21.44|
000022  7011              STRB     r1,[r2,#0]
;;;594          break;            
000024  e000              B        |L21.40|
                  |L21.38|
;;;595          
;;;596        default:
;;;597          break;      
000026  bf00              NOP      
                  |L21.40|
000028  bf00              NOP                            ;589
;;;598      }
;;;599    }
00002a  4770              BX       lr
;;;600    
                          ENDP

                  |L21.44|
                          DCD      0x40021020
                  |L21.48|
                          DCD      0x40021000

                          AREA ||i.RCC_LSICmd||, CODE, READONLY, ALIGN=2

                  RCC_LSICmd PROC
;;;609    *******************************************************************************/
;;;610    void RCC_LSICmd(FunctionalState NewState)
000000  4901              LDR      r1,|L22.8|
;;;611    {
;;;612      /* Check the parameters */
;;;613      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;614    
;;;615      *(vu32 *) CSR_LSION_BB = (u32)NewState;
000002  6008              STR      r0,[r1,#0]
;;;616    }
000004  4770              BX       lr
;;;617    
                          ENDP

000006  0000              DCW      0x0000
                  |L22.8|
                          DCD      0x42420480

                          AREA ||i.RCC_MCOConfig||, CODE, READONLY, ALIGN=2

                  RCC_MCOConfig PROC
;;;959    *******************************************************************************/
;;;960    void RCC_MCOConfig(u8 RCC_MCO)
000000  4901              LDR      r1,|L23.8|
;;;961    {
;;;962      /* Check the parameters */
;;;963      assert_param(IS_RCC_MCO(RCC_MCO));
;;;964    
;;;965      /* Perform Byte access to MCO[2:0] bits to select the MCO source */
;;;966      *(vu8 *) CFGR_BYTE4_ADDRESS = RCC_MCO;
000002  71c8              STRB     r0,[r1,#7]
;;;967    }
000004  4770              BX       lr
;;;968    
                          ENDP

000006  0000              DCW      0x0000
                  |L23.8|
                          DCD      0x40021000

                          AREA ||i.RCC_PCLK1Config||, CODE, READONLY, ALIGN=2

                  RCC_PCLK1Config PROC
;;;419    *******************************************************************************/
;;;420    void RCC_PCLK1Config(u32 RCC_HCLK)
000000  4601              MOV      r1,r0
;;;421    {
;;;422      u32 tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;423    
;;;424      /* Check the parameters */
;;;425      assert_param(IS_RCC_PCLK(RCC_HCLK));
;;;426    
;;;427      tmpreg = RCC->CFGR;
000004  4a03              LDR      r2,|L24.20|
000006  6850              LDR      r0,[r2,#4]
;;;428    
;;;429      /* Clear PPRE1[2:0] bits */
;;;430      tmpreg &= CFGR_PPRE1_Reset_Mask;
000008  f42060e0          BIC      r0,r0,#0x700
;;;431    
;;;432      /* Set PPRE1[2:0] bits according to RCC_HCLK value */
;;;433      tmpreg |= RCC_HCLK;
00000c  4308              ORRS     r0,r0,r1
;;;434    
;;;435      /* Store the new value */
;;;436      RCC->CFGR = tmpreg;
00000e  6050              STR      r0,[r2,#4]
;;;437    }
000010  4770              BX       lr
;;;438    
                          ENDP

000012  0000              DCW      0x0000
                  |L24.20|
                          DCD      0x40021000

                          AREA ||i.RCC_PCLK2Config||, CODE, READONLY, ALIGN=2

                  RCC_PCLK2Config PROC
;;;452    *******************************************************************************/
;;;453    void RCC_PCLK2Config(u32 RCC_HCLK)
000000  4601              MOV      r1,r0
;;;454    {
;;;455      u32 tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;456    
;;;457      /* Check the parameters */
;;;458      assert_param(IS_RCC_PCLK(RCC_HCLK));
;;;459    
;;;460      tmpreg = RCC->CFGR;
000004  4a03              LDR      r2,|L25.20|
000006  6850              LDR      r0,[r2,#4]
;;;461    
;;;462      /* Clear PPRE2[2:0] bits */
;;;463      tmpreg &= CFGR_PPRE2_Reset_Mask;
000008  f4205060          BIC      r0,r0,#0x3800
;;;464    
;;;465      /* Set PPRE2[2:0] bits according to RCC_HCLK value */
;;;466      tmpreg |= RCC_HCLK << 3;
00000c  ea4000c1          ORR      r0,r0,r1,LSL #3
;;;467    
;;;468      /* Store the new value */
;;;469      RCC->CFGR = tmpreg;
000010  6050              STR      r0,[r2,#4]
;;;470    }
000012  4770              BX       lr
;;;471    
                          ENDP

                  |L25.20|
                          DCD      0x40021000

                          AREA ||i.RCC_PLLCmd||, CODE, READONLY, ALIGN=2

                  RCC_PLLCmd PROC
;;;314    *******************************************************************************/
;;;315    void RCC_PLLCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L26.8|
;;;316    {
;;;317      /* Check the parameters */
;;;318      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;319    
;;;320      *(vu32 *) CR_PLLON_BB = (u32)NewState;
000002  6608              STR      r0,[r1,#0x60]
;;;321    }
000004  4770              BX       lr
;;;322    
                          ENDP

000006  0000              DCW      0x0000
                  |L26.8|
                          DCD      0x42420000

                          AREA ||i.RCC_PLLConfig||, CODE, READONLY, ALIGN=2

                  RCC_PLLConfig PROC
;;;285    *******************************************************************************/
;;;286    void RCC_PLLConfig(u32 RCC_PLLSource, u32 RCC_PLLMul)
000000  4602              MOV      r2,r0
;;;287    {
;;;288      u32 tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;289    
;;;290      /* Check the parameters */
;;;291      assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
;;;292      assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));
;;;293    
;;;294      tmpreg = RCC->CFGR;
000004  4b04              LDR      r3,|L27.24|
000006  6858              LDR      r0,[r3,#4]
;;;295    
;;;296      /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
;;;297      tmpreg &= CFGR_PLL_Mask;
000008  f420107c          BIC      r0,r0,#0x3f0000
;;;298    
;;;299      /* Set the PLL configuration bits */
;;;300      tmpreg |= RCC_PLLSource | RCC_PLLMul;
00000c  ea420301          ORR      r3,r2,r1
000010  4318              ORRS     r0,r0,r3
;;;301    
;;;302      /* Store the new value */
;;;303      RCC->CFGR = tmpreg;
000012  4b01              LDR      r3,|L27.24|
000014  6058              STR      r0,[r3,#4]
;;;304    }
000016  4770              BX       lr
;;;305    
                          ENDP

                  |L27.24|
                          DCD      0x40021000

                          AREA ||i.RCC_RTCCLKCmd||, CODE, READONLY, ALIGN=2

                  RCC_RTCCLKCmd PROC
;;;650    *******************************************************************************/
;;;651    void RCC_RTCCLKCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L28.8|
;;;652    {
;;;653      /* Check the parameters */
;;;654      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;655    
;;;656      *(vu32 *) BDCR_RTCEN_BB = (u32)NewState;
000002  6008              STR      r0,[r1,#0]
;;;657    }
000004  4770              BX       lr
;;;658    
                          ENDP

000006  0000              DCW      0x0000
                  |L28.8|
                          DCD      0x4242043c

                          AREA ||i.RCC_RTCCLKConfig||, CODE, READONLY, ALIGN=2

                  RCC_RTCCLKConfig PROC
;;;631    *******************************************************************************/
;;;632    void RCC_RTCCLKConfig(u32 RCC_RTCCLKSource)
000000  4902              LDR      r1,|L29.12|
;;;633    {
;;;634      /* Check the parameters */
;;;635      assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
;;;636    
;;;637      /* Select the RTC clock source */
;;;638      RCC->BDCR |= RCC_RTCCLKSource;
000002  6a09              LDR      r1,[r1,#0x20]
000004  4301              ORRS     r1,r1,r0
000006  4a01              LDR      r2,|L29.12|
000008  6211              STR      r1,[r2,#0x20]
;;;639    }
00000a  4770              BX       lr
;;;640    
                          ENDP

                  |L29.12|
                          DCD      0x40021000

                          AREA ||i.RCC_SYSCLKConfig||, CODE, READONLY, ALIGN=2

                  RCC_SYSCLKConfig PROC
;;;333    *******************************************************************************/
;;;334    void RCC_SYSCLKConfig(u32 RCC_SYSCLKSource)
000000  4601              MOV      r1,r0
;;;335    {
;;;336      u32 tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;337    
;;;338      /* Check the parameters */
;;;339      assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
;;;340    
;;;341      tmpreg = RCC->CFGR;
000004  4a03              LDR      r2,|L30.20|
000006  6850              LDR      r0,[r2,#4]
;;;342    
;;;343      /* Clear SW[1:0] bits */
;;;344      tmpreg &= CFGR_SW_Mask;
000008  f0200003          BIC      r0,r0,#3
;;;345    
;;;346      /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
;;;347      tmpreg |= RCC_SYSCLKSource;
00000c  4308              ORRS     r0,r0,r1
;;;348    
;;;349      /* Store the new value */
;;;350      RCC->CFGR = tmpreg;
00000e  6050              STR      r0,[r2,#4]
;;;351    }
000010  4770              BX       lr
;;;352    
                          ENDP

000012  0000              DCW      0x0000
                  |L30.20|
                          DCD      0x40021000

                          AREA ||i.RCC_USBCLKConfig||, CODE, READONLY, ALIGN=2

                  RCC_USBCLKConfig PROC
;;;518    *******************************************************************************/
;;;519    void RCC_USBCLKConfig(u32 RCC_USBCLKSource)
000000  4901              LDR      r1,|L31.8|
;;;520    {
;;;521      /* Check the parameters */
;;;522      assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));
;;;523    
;;;524      *(vu32 *) CFGR_USBPRE_BB = RCC_USBCLKSource;
000002  6008              STR      r0,[r1,#0]
;;;525    }
000004  4770              BX       lr
;;;526    
                          ENDP

000006  0000              DCW      0x0000
                  |L31.8|
                          DCD      0x424200d8

                          AREA ||i.RCC_WaitForHSEStartUp||, CODE, READONLY, ALIGN=2

                  RCC_WaitForHSEStartUp PROC
;;;198    *******************************************************************************/
;;;199    ErrorStatus RCC_WaitForHSEStartUp(void)
000000  b510              PUSH     {r4,lr}
;;;200    {
;;;201      ErrorStatus status = ERROR;
000002  2400              MOVS     r4,#0
;;;202    
;;;203      /* Wait till HSE is ready and if Time out is reached exit */
;;;204      do
000004  bf00              NOP      
                  |L32.6|
;;;205      {
;;;206        HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
000006  2031              MOVS     r0,#0x31
000008  f7fffffe          BL       RCC_GetFlagStatus
00000c  490c              LDR      r1,|L32.64|
00000e  7008              STRB     r0,[r1,#0]
;;;207        StartUpCounter++;  
000010  480c              LDR      r0,|L32.68|
000012  6800              LDR      r0,[r0,#0]  ; StartUpCounter
000014  1c40              ADDS     r0,r0,#1
000016  490b              LDR      r1,|L32.68|
000018  6008              STR      r0,[r1,#0]  ; StartUpCounter
;;;208      } while((HSEStatus == RESET) && (StartUpCounter != HSEStartUp_TimeOut));
00001a  4809              LDR      r0,|L32.64|
00001c  7800              LDRB     r0,[r0,#0]  ; HSEStatus
00001e  b928              CBNZ     r0,|L32.44|
000020  4608              MOV      r0,r1
000022  6800              LDR      r0,[r0,#0]  ; StartUpCounter
000024  f5a07180          SUB      r1,r0,#0x100
000028  39ff              SUBS     r1,r1,#0xff
00002a  d1ec              BNE      |L32.6|
                  |L32.44|
;;;209    
;;;210    
;;;211      if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
00002c  2031              MOVS     r0,#0x31
00002e  f7fffffe          BL       RCC_GetFlagStatus
000032  b108              CBZ      r0,|L32.56|
;;;212      {
;;;213        status = SUCCESS;
000034  2401              MOVS     r4,#1
000036  e000              B        |L32.58|
                  |L32.56|
;;;214      }
;;;215      else
;;;216      {
;;;217        status = ERROR;
000038  2400              MOVS     r4,#0
                  |L32.58|
;;;218      }  
;;;219    
;;;220      return (status);
00003a  4620              MOV      r0,r4
;;;221    }
00003c  bd10              POP      {r4,pc}
;;;222    
                          ENDP

00003e  0000              DCW      0x0000
                  |L32.64|
                          DCD      HSEStatus
                  |L32.68|
                          DCD      StartUpCounter

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  APBAHBPrescTable
000000  00000000          DCB      0x00,0x00,0x00,0x00
000004  01020304          DCB      0x01,0x02,0x03,0x04
000008  01020304          DCB      0x01,0x02,0x03,0x04
00000c  06070809          DCB      0x06,0x07,0x08,0x09
                  ADCPrescTable
000010  02040608          DCB      0x02,0x04,0x06,0x08

                          AREA ||.data||, DATA, ALIGN=2

                  StartUpCounter
                          DCD      0x00000000
                  HSEStatus
000004  00                DCB      0x00
